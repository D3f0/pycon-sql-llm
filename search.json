[
  {
    "objectID": "slides.html#about-myself",
    "href": "slides.html#about-myself",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "About myself",
    "text": "About myself\n\n\n\n\n\nüêç Pythonista with 18 years of experience.\n\nCo-organized SciPy Latin America\nPyCon Argentina and EuroPython speaker\n\nüöú Worked as CTO in Hello Tractor\nüß™ Software Engineer at IBM Research\nüõ∞Ô∏è Worked in Foundational Models for Geospatial applications\nüí¨ Currently working on Flowpilot , providing core features to different products and divisions."
  },
  {
    "objectID": "slides.html#tomorrow",
    "href": "slides.html#tomorrow",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Tomorrow",
    "text": "Tomorrow\n\n\n\n\n\n\n\n\nLearn about Multimodal Geospatial Foundation Models with Terratorch by Wanjiru, Beldine and Reggie."
  },
  {
    "objectID": "slides.html#follow-along-or-at",
    "href": "slides.html#follow-along-or-at",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Follow along (or at üè°)",
    "text": "Follow along (or at üè°)"
  },
  {
    "objectID": "slides.html#high-level-diagram",
    "href": "slides.html#high-level-diagram",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "High level diagram",
    "text": "High level diagram"
  },
  {
    "objectID": "slides.html#public-datasets-used-in-text-to-sql",
    "href": "slides.html#public-datasets-used-in-text-to-sql",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Public datasets used in text to SQL",
    "text": "Public datasets used in text to SQL\n\n\n\nThese datasets define:\n\n‚ùì Natural language questions\nü´∞ Expected SQL\nüèóÔ∏è Database schema & content\nüîé Evaluation metrics\nü•á Leaderboard\n\n\n\n\n\nüï∑Ô∏è Spider\n\n\n\n\nüï∑Ô∏è üï∑Ô∏è Spider 2\n\n\n\n\nüê¶ BIRD\n\n\n\n\nüèπ Archer"
  },
  {
    "objectID": "slides.html#bird",
    "href": "slides.html#bird",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "BIRD",
    "text": "BIRD\n\n\n\nIBM Research in the leaderboard last year\n\n\n\nWe‚Äôre select BIRD dataset since we have some experience with it, we managed to get to the top of the leatherboard in 2024/6"
  },
  {
    "objectID": "slides.html#er-of-california_schools",
    "href": "slides.html#er-of-california_schools",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "ER of california_schools ",
    "text": "ER of california_schools"
  },
  {
    "objectID": "slides.html#prompts-for-sql-generation",
    "href": "slides.html#prompts-for-sql-generation",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Prompts for SQL generation",
    "text": "Prompts for SQL generation\n\nLLMs don‚Äôt know the üèóÔ∏è structure of our database, and may hallucinate about it, or create some flat out invalid SQL.\n\n\nWe have to provide extra information about the structure in the instructions.\nFor this we will use a prompt string with some palace-holders .\n\n\nSome research papers from our team from our team:\n Weakly Supervised Detection of Hallucinations in LLMs\n\n\n Localizing Persona Representations In LLMs\n\n\nNow we‚Äôre gonna see what we‚Äôre put in the prompt, for starters the schema"
  },
  {
    "objectID": "slides.html#the-messages-that-constitute-the-prompt",
    "href": "slides.html#the-messages-that-constitute-the-prompt",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "The messages that constitute the prompt",
    "text": "The messages that constitute the prompt\nNow we construct a list of messages. These are dicts which have a key user or system, and a content.\n\ndef generate_messages(question, dialect=\"SQL\", top_k=5, table_info=\"\"):\n    # Create a ChatPromptTemplate\n    messages = [\n      {\n        \"role\": \"system\", \n        \"content\": system_message.format(\n          dialect=dialect, \n          top_k=top_k, \n          table_info=table_info\n        )},\n      {\n        \"role\": \"user\", \n        \"content\": question\n      }\n    ]\n    \n    return messages\n\nmessages = generate_messages(\n  question=question, \n  dialect=db.dialect, top_k=10, \n  table_info=db.get_table_info())\nmessages"
  },
  {
    "objectID": "slides.html#the-messages-that-constitute-the-prompt-output",
    "href": "slides.html#the-messages-that-constitute-the-prompt-output",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "The messages that constitute the prompt",
    "text": "The messages that constitute the prompt\n\n[{'role': 'system',\n  'content': '\\nGiven an input question, create a syntactically correct sqlite query to\\nrun to help find the answer. Unless the user specifies in his question a\\nspecific number of examples they wish to obtain, always limit your query to\\nat most 10 results. You can order the results by a relevant column to\\nreturn the most interesting examples in the database.\\n\\nNever query for all the columns from a specific table, only ask for a the\\nfew relevant columns given the question.\\n\\nPay attention to use only the column names that you can see in the schema\\ndescription. Be careful to not query for columns that do not exist. Also,\\npay attention to which column is in which table.\\n\\nOnly use the following tables:\\n\\nCREATE TABLE frpm (\\n\\t\"CDSCode\" TEXT NOT NULL, \\n\\t\"Academic Year\" TEXT, \\n\\t\"County Code\" TEXT, \\n\\t\"District Code\" INTEGER, \\n\\t\"School Code\" TEXT, \\n\\t\"County Name\" TEXT, \\n\\t\"District Name\" TEXT, \\n\\t\"School Name\" TEXT, \\n\\t\"District Type\" TEXT, \\n\\t\"School Type\" TEXT, \\n\\t\"Educational Option Type\" TEXT, \\n\\t\"NSLP Provision Status\" TEXT, \\n\\t\"Charter School (Y/N)\" INTEGER, \\n\\t\"Charter School Number\" TEXT, \\n\\t\"Charter Funding Type\" TEXT, \\n\\t\"IRC\" INTEGER, \\n\\t\"Low Grade\" TEXT, \\n\\t\"High Grade\" TEXT, \\n\\t\"Enrollment (K-12)\" REAL, \\n\\t\"Free Meal Count (K-12)\" REAL, \\n\\t\"Percent (%) Eligible Free (K-12)\" REAL, \\n\\t\"FRPM Count (K-12)\" REAL, \\n\\t\"Percent (%) Eligible FRPM (K-12)\" REAL, \\n\\t\"Enrollment (Ages 5-17)\" REAL, \\n\\t\"Free Meal Count (Ages 5-17)\" REAL, \\n\\t\"Percent (%) Eligible Free (Ages 5-17)\" REAL, \\n\\t\"FRPM Count (Ages 5-17)\" REAL, \\n\\t\"Percent (%) Eligible FRPM (Ages 5-17)\" REAL, \\n\\t\"2013-14 CALPADS Fall 1 Certification Status\" INTEGER, \\n\\tPRIMARY KEY (\"CDSCode\"), \\n\\tFOREIGN KEY(\"CDSCode\") REFERENCES schools (\"CDSCode\")\\n)\\n\\n/*\\n3 rows from frpm table:\\nCDSCode\\tAcademic Year\\tCounty Code\\tDistrict Code\\tSchool Code\\tCounty Name\\tDistrict Name\\tSchool Name\\tDistrict Type\\tSchool Type\\tEducational Option Type\\tNSLP Provision Status\\tCharter School (Y/N)\\tCharter School Number\\tCharter Funding Type\\tIRC\\tLow Grade\\tHigh Grade\\tEnrollment (K-12)\\tFree Meal Count (K-12)\\tPercent (%) Eligible Free (K-12)\\tFRPM Count (K-12)\\tPercent (%) Eligible FRPM (K-12)\\tEnrollment (Ages 5-17)\\tFree Meal Count (Ages 5-17)\\tPercent (%) Eligible Free (Ages 5-17)\\tFRPM Count (Ages 5-17)\\tPercent (%) Eligible FRPM (Ages 5-17)\\t2013-14 CALPADS Fall 1 Certification Status\\n01100170109835\\t2014-2015\\t01\\t10017\\t0109835\\tAlameda\\tAlameda County Office of Education\\tFAME Public Charter\\tCounty Office of Education (COE)\\tK-12 Schools (Public)\\tTraditional\\tNone\\t1\\t0728\\tDirectly funded\\t1\\tK\\t12\\t1087.0\\t565.0\\t0.519779208831647\\t715.0\\t0.657773689052438\\t1070.0\\t553.0\\t0.516822429906542\\t702.0\\t0.65607476635514\\t1\\n01100170112607\\t2014-2015\\t01\\t10017\\t0112607\\tAlameda\\tAlameda County Office of Education\\tEnvision Academy for Arts & Technology\\tCounty Office of Education (COE)\\tHigh Schools (Public)\\tTraditional\\tNone\\t1\\t0811\\tDirectly funded\\t1\\t9\\t12\\t395.0\\t186.0\\t0.470886075949367\\t186.0\\t0.470886075949367\\t376.0\\t182.0\\t0.484042553191489\\t182.0\\t0.484042553191489\\t1\\n01100170118489\\t2014-2015\\t01\\t10017\\t0118489\\tAlameda\\tAlameda County Office of Education\\tAspire California College Preparatory Academy\\tCounty Office of Education (COE)\\tHigh Schools (Public)\\tTraditional\\tNone\\t1\\t1049\\tDirectly funded\\t1\\t9\\t12\\t244.0\\t134.0\\t0.549180327868853\\t175.0\\t0.717213114754098\\t230.0\\t128.0\\t0.556521739130435\\t168.0\\t0.730434782608696\\t1\\n*/\\n\\n\\nCREATE TABLE satscores (\\n\\tcds TEXT NOT NULL, \\n\\trtype TEXT NOT NULL, \\n\\tsname TEXT, \\n\\tdname TEXT, \\n\\tcname TEXT, \\n\\tenroll12 INTEGER NOT NULL, \\n\\t\"NumTstTakr\" INTEGER NOT NULL, \\n\\t\"AvgScrRead\" INTEGER, \\n\\t\"AvgScrMath\" INTEGER, \\n\\t\"AvgScrWrite\" INTEGER, \\n\\t\"NumGE1500\" INTEGER, \\n\\tPRIMARY KEY (cds), \\n\\tFOREIGN KEY(cds) REFERENCES schools (\"CDSCode\")\\n)\\n\\n/*\\n3 rows from satscores table:\\ncds\\trtype\\tsname\\tdname\\tcname\\tenroll12\\tNumTstTakr\\tAvgScrRead\\tAvgScrMath\\tAvgScrWrite\\tNumGE1500\\n01100170000000\\tD\\tNone\\tAlameda County Office of Education\\tAlameda\\t398\\t88\\t418\\t418\\t417\\t14\\n01100170109835\\tS\\tFAME Public Charter\\tAlameda County Office of Education\\tAlameda\\t62\\t17\\t503\\t546\\t505\\t9\\n01100170112607\\tS\\tEnvision Academy for Arts & Technology\\tAlameda County Office of Education\\tAlameda\\t75\\t71\\t397\\t387\\t395\\t5\\n*/\\n\\n\\nCREATE TABLE schools (\\n\\t\"CDSCode\" TEXT NOT NULL, \\n\\t\"NCESDist\" TEXT, \\n\\t\"NCESSchool\" TEXT, \\n\\t\"StatusType\" TEXT NOT NULL, \\n\\t\"County\" TEXT NOT NULL, \\n\\t\"District\" TEXT NOT NULL, \\n\\t\"School\" TEXT, \\n\\t\"Street\" TEXT, \\n\\t\"StreetAbr\" TEXT, \\n\\t\"City\" TEXT, \\n\\t\"Zip\" TEXT, \\n\\t\"State\" TEXT, \\n\\t\"MailStreet\" TEXT, \\n\\t\"MailStrAbr\" TEXT, \\n\\t\"MailCity\" TEXT, \\n\\t\"MailZip\" TEXT, \\n\\t\"MailState\" TEXT, \\n\\t\"Phone\" TEXT, \\n\\t\"Ext\" TEXT, \\n\\t\"Website\" TEXT, \\n\\t\"OpenDate\" DATE, \\n\\t\"ClosedDate\" DATE, \\n\\t\"Charter\" INTEGER, \\n\\t\"CharterNum\" TEXT, \\n\\t\"FundingType\" TEXT, \\n\\t\"DOC\" TEXT NOT NULL, \\n\\t\"DOCType\" TEXT NOT NULL, \\n\\t\"SOC\" TEXT, \\n\\t\"SOCType\" TEXT, \\n\\t\"EdOpsCode\" TEXT, \\n\\t\"EdOpsName\" TEXT, \\n\\t\"EILCode\" TEXT, \\n\\t\"EILName\" TEXT, \\n\\t\"GSoffered\" TEXT, \\n\\t\"GSserved\" TEXT, \\n\\t\"Virtual\" TEXT, \\n\\t\"Magnet\" INTEGER, \\n\\t\"Latitude\" REAL, \\n\\t\"Longitude\" REAL, \\n\\t\"AdmFName1\" TEXT, \\n\\t\"AdmLName1\" TEXT, \\n\\t\"AdmEmail1\" TEXT, \\n\\t\"AdmFName2\" TEXT, \\n\\t\"AdmLName2\" TEXT, \\n\\t\"AdmEmail2\" TEXT, \\n\\t\"AdmFName3\" TEXT, \\n\\t\"AdmLName3\" TEXT, \\n\\t\"AdmEmail3\" TEXT, \\n\\t\"LastUpdate\" DATE NOT NULL, \\n\\tPRIMARY KEY (\"CDSCode\")\\n)\\n\\n/*\\n3 rows from schools table:\\nCDSCode\\tNCESDist\\tNCESSchool\\tStatusType\\tCounty\\tDistrict\\tSchool\\tStreet\\tStreetAbr\\tCity\\tZip\\tState\\tMailStreet\\tMailStrAbr\\tMailCity\\tMailZip\\tMailState\\tPhone\\tExt\\tWebsite\\tOpenDate\\tClosedDate\\tCharter\\tCharterNum\\tFundingType\\tDOC\\tDOCType\\tSOC\\tSOCType\\tEdOpsCode\\tEdOpsName\\tEILCode\\tEILName\\tGSoffered\\tGSserved\\tVirtual\\tMagnet\\tLatitude\\tLongitude\\tAdmFName1\\tAdmLName1\\tAdmEmail1\\tAdmFName2\\tAdmLName2\\tAdmEmail2\\tAdmFName3\\tAdmLName3\\tAdmEmail3\\tLastUpdate\\n01100170000000\\t0691051\\tNone\\tActive\\tAlameda\\tAlameda County Office of Education\\tNone\\t313 West Winton Avenue\\t313 West Winton Ave.\\tHayward\\t94544-1136\\tCA\\t313 West Winton Avenue\\t313 West Winton Ave.\\tHayward\\t94544-1136\\tCA\\t(510) 887-0152\\tNone\\twww.acoe.org\\tNone\\tNone\\tNone\\tNone\\tNone\\t00\\tCounty Office of Education (COE)\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\t37.658212\\t-122.09713\\tL Karen\\tMonroe\\tlkmonroe@acoe.org\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\t2015-06-23\\n01100170109835\\t0691051\\t10546\\tClosed\\tAlameda\\tAlameda County Office of Education\\tFAME Public Charter\\t39899 Balentine Drive, Suite 335\\t39899 Balentine Dr., Ste. 335\\tNewark\\t94560-5359\\tCA\\t39899 Balentine Drive, Suite 335\\t39899 Balentine Dr., Ste. 335\\tNewark\\t94560-5359\\tCA\\tNone\\tNone\\tNone\\t2005-08-29\\t2015-07-31\\t1\\t0728\\tDirectly funded\\t00\\tCounty Office of Education (COE)\\t65\\tK-12 Schools (Public)\\tTRAD\\tTraditional\\tELEMHIGH\\tElementary-High Combination\\tK-12\\tK-12\\tP\\t0\\t37.521436\\t-121.99391\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\t2015-09-01\\n01100170112607\\t0691051\\t10947\\tActive\\tAlameda\\tAlameda County Office of Education\\tEnvision Academy for Arts & Technology\\t1515 Webster Street\\t1515 Webster St.\\tOakland\\t94612-3355\\tCA\\t1515 Webster Street\\t1515 Webster St.\\tOakland\\t94612\\tCA\\t(510) 596-8901\\tNone\\twww.envisionacademy.org/\\t2006-08-28\\tNone\\t1\\t0811\\tDirectly funded\\t00\\tCounty Office of Education (COE)\\t66\\tHigh Schools (Public)\\tTRAD\\tTraditional\\tHS\\tHigh School\\t9-12\\t9-12\\tN\\t0\\t37.80452\\t-122.26815\\tLaura\\tRobell\\tlaura@envisionacademy.org\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\t2015-06-18\\n*/\\n'},\n {'role': 'user',\n  'content': 'How many schools with an average score in Math greater than 400 in the SAT test are exclusively virtual?'}]"
  },
  {
    "objectID": "slides.html#calling-the-llm-with-the-prompt",
    "href": "slides.html#calling-the-llm-with-the-prompt",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Calling the LLM with the prompt",
    "text": "Calling the LLM with the prompt\nlitellm is a Open Source Python library (and also a Proxy) that can be used to run inference and compute embeddings with a vast number of providers (new models added weekly).\nAmong the provider lists we have:\n\nOllama / LMStudio / llama.cpp\nIBM WatsonX.ai\nAnthropic\nOpenAI\nAWS Sagemaker\nOpenRouter\nand more"
  },
  {
    "objectID": "slides.html#structured-output",
    "href": "slides.html#structured-output",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Structured output",
    "text": "Structured output\n\nAlthough it looks we have the SQL, LLMs currently support structured output. Also known as JSON Schema.\nA Python library that generates JSON Schema from classes automatically is called Pydantic. Let‚Äôs see how we can ask 2 things from the LLM.\n\n\n\nfrom pydantic import BaseModel, Field\nclass SQLOutput(BaseModel):\n    sql: str = Field(description=\"The SQL query\")\n    explanation: str = Field(\n      description=\"The reasoning for the query construction\")\n\n# Optional \n# litellm.enable_json_schema_validation = True\n\nresponse = litellm.completion(\n  model=model,\n  messages=messages,\n  response_format=SQLOutput,\n)\noutput = SQLOutput.model_validate_json(\n  response.choices[0].message.content)"
  },
  {
    "objectID": "slides.html#structured-output-output",
    "href": "slides.html#structured-output-output",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Structured output",
    "text": "Structured output"
  },
  {
    "objectID": "slides.html#state-for-sql-workflow",
    "href": "slides.html#state-for-sql-workflow",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "State for SQL workflow",
    "text": "State for SQL workflow\nLangGraph uses state that is propagated through nodes.\nThis state can be defined with a TypedDict or a Pydantic BaseModel.\n\nfrom typing import Optional, Dict, List\nfrom dataclasses import dataclass, field\nfrom sqlalchemy import Engine\n\n@dataclass\nclass State:\n    question: str = \"\"\n    engine: Optional[Engine] = None\n    database: Optional[SQLDatabase] = None\n    messages: List[Dict[str, str]] = field(default_factory=list)\n    sql: Optional[str] = None\n    results: Optional[str] = None"
  },
  {
    "objectID": "slides.html#creating-nodes",
    "href": "slides.html#creating-nodes",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Creating Nodes",
    "text": "Creating Nodes\nThe initial node will receive the user input and create the state.\n\ndef init(user_input: Dict[str, str]) -&gt; State:\n  engine = create_engine(user_input[\"database\"])\n  database = SQLDatabase(engine=engine)\n  return State(\n    question=user_input[\"question\"], \n    database=database,\n  )"
  },
  {
    "objectID": "slides.html#generating-the-prompt",
    "href": "slides.html#generating-the-prompt",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Generating the prompt",
    "text": "Generating the prompt\n\ndef make_prompt(state: State) -&gt; State:\n    messages = [\n      {\n        \"role\": \"system\", \n        \"content\": system_message.format(\n          dialect=state.database.dialect, \n          top_k=top_k,\n          table_info=state.database.get_table_info()\n        )},\n      {\n        \"role\": \"user\", \n        \"content\": state.question,\n      }\n    ]\n    return state"
  },
  {
    "objectID": "slides.html#calling-the-llm",
    "href": "slides.html#calling-the-llm",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Calling the LLM",
    "text": "Calling the LLM\nThe initial node will receive the user input and create the state.\n\ndef generate(state: State) -&gt; State:\n\n  response = litellm.completion(\n    model=model,\n    messages=messages,\n    response_format=SQLOutput,\n  )\n  output = SQLOutput.model_validate_json(response.choices[0].message.content)\n  print(output)\n  engine = create_engine(user_input[\"database\"])\n  database = SQLDatabase(engine=engine)\n  return State(\n    question=user_input[\"question\"], \n    database=database,\n  )"
  },
  {
    "objectID": "slides.html#executing-the-sql",
    "href": "slides.html#executing-the-sql",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Executing the SQL",
    "text": "Executing the SQL\nThe initial node will receive the user input and create the state.\n\ndef execute(state: State) -&gt; State:\n  with state.engine.connect() as con:\n    state.result = conn.execute(text(state.sql))\n  \n  return State(\n    question=user_input[\"question\"], \n    database=database,\n  )"
  },
  {
    "objectID": "slides.html#graph-creation",
    "href": "slides.html#graph-creation",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Graph creation",
    "text": "Graph creation\n\nfrom langgraph.graph import StateGraph, START, END\n\ngraph_builder = StateGraph(State)\ngraph_builder.add_node(\"init\", init)\ngraph_builder.add_node(\"make_prompt\", make_prompt)\ngraph_builder.add_node(\"generate\", generate)\ngraph_builder.add_node(\"execute\", execute)\ngraph_builder.add_edge(START, \"init\")\ngraph_builder.add_edge(\"init\", \"make_prompt\")\ngraph_builder.add_edge(\"make_prompt\", \"generate\")\ngraph_builder.add_edge(\"generate\", \"execute\")\ngraph = graph_builder.compile()"
  },
  {
    "objectID": "slides.html#visualizing-the-graph",
    "href": "slides.html#visualizing-the-graph",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Visualizing the graph ",
    "text": "Visualizing the graph \n\n\n\n\n\n\n\n---\nconfig:\n  flowchart:\n    curve: linear\n---\ngraph TD;\n    __start__([&lt;p&gt;__start__&lt;/p&gt;]):::first\n    init(init)\n    make_prompt(make_prompt)\n    generate(generate)\n    execute(execute)\n    __end__([&lt;p&gt;__end__&lt;/p&gt;]):::last\n    __start__ --&gt; init;\n    generate --&gt; execute;\n    init --&gt; make_prompt;\n    make_prompt --&gt; generate;\n    execute --&gt; __end__;\n    classDef default fill:#f2f0ff,line-height:1.2\n    classDef first fill-opacity:0\n    classDef last fill:#bfb6fc"
  },
  {
    "objectID": "slides.html#move-from-function-to-classes",
    "href": "slides.html#move-from-function-to-classes",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Move from function to classes",
    "text": "Move from function to classes\n\n\n\nThe workflow state can be a dict or TypedDict, but dataclass or a BaseModel is more convenient.\n\nclass State(TypedDict):\n  connection: ...\n  messages: ...\n  schema: ...\n\n\n\n\n\n\nA simple function that works with the state.\n\ndef create_sql(state: State) -&gt; State:\n  # Do something\n  return State(...)\n\n\n\n\n\n\nThis can also be a class if we want to pass more information.\n\nclass CreateSQLNode:\n  def __init__(self, config: ...) -&gt; None:\n    self.config = config\n  \n  def __call__(\n    self, state: State\n  ) -&gt; State:\n    # do something\n    return State(...)"
  },
  {
    "objectID": "slides.html#sql-validation",
    "href": "slides.html#sql-validation",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "SQL validation",
    "text": "SQL validation\n\nWe can pass the SQL to SQLAlchemy engine to validate if the syntax is correct\nSQLGlot parse_one() provides asn AST of the SQL for:\n\nFinding dangerous operations (DML)\nFor any updates to the query, working on an AST is better than string substitution."
  },
  {
    "objectID": "slides.html#enhancing-the-context",
    "href": "slides.html#enhancing-the-context",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Enhancing the context",
    "text": "Enhancing the context\n\nTables with a high number of columns can make the context larger\n\nRAG at the column level is a common technique to improve efficiency and accuracy\n\nRetrieving the values from the DB can help the LLM produce better queries\nProviding some examples in the context with the question and SQL pairs also improves efficiency."
  },
  {
    "objectID": "slides.html#dynamic-context",
    "href": "slides.html#dynamic-context",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Dynamic context",
    "text": "Dynamic context\n\nOther types of examples of well understood terms may require some mapping.\n\nFor example, the term Q1 can mean, quarter one, but it should be supplied dynamically.\n\nFunction nodes, when we want to modify the query another approach is to create"
  },
  {
    "objectID": "slides.html#extensibility",
    "href": "slides.html#extensibility",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Extensibility",
    "text": "Extensibility\n\n\nOffload node responsibilities into external services (e.g.¬†DB execution)\nPipelines defined as YAML.\nEach node is registered in a collection of nodes, and each node in the pipeline accepts the __init__ arguments.\nUse Python‚Äôs built in entry-point system to install nodes. This is a good approach to separate production from"
  }
]