[
  {
    "objectID": "buffer.html",
    "href": "buffer.html",
    "title": "Current OSS tooling",
    "section": "",
    "text": "🦜 ⛓️ LangChain: Q/A over SQL data"
  },
  {
    "objectID": "buffer.html#pydantic-ai",
    "href": "buffer.html#pydantic-ai",
    "title": "Current OSS tooling",
    "section": "Pydantic AI",
    "text": "Pydantic AI\n2- PyDantic’s AI SQL workbench"
  },
  {
    "objectID": "buffer.html#common-challenges",
    "href": "buffer.html#common-challenges",
    "title": "Current OSS tooling",
    "section": "Common challenges",
    "text": "Common challenges\n\nSome databases have specific dialects, e.g. SQLite, Postgres, MySQL, Oracle, db2, etc.\nThe training set of the models may not have a sufficient examples for the database engine we’re interested in.\nProviding tables is great, but some times, schemas are quite big and the table and column names may be not human friendly."
  },
  {
    "objectID": "buffer.html#pipelines",
    "href": "buffer.html#pipelines",
    "title": "Current OSS tooling",
    "section": "Pipelines",
    "text": "Pipelines\nOur work was focused on prompt optimization by a small team, but as our teams tarted to grown we needed to allow different research team to focus on different areas.\nWe created a framework inspired in LangGraph tailored to the text2sql generation.\n\n\n\nimport os\n\na = {\"a\": 1}"
  },
  {
    "objectID": "buffer.html#relevant-challenges",
    "href": "buffer.html#relevant-challenges",
    "title": "Current OSS tooling",
    "section": "Relevant challenges",
    "text": "Relevant challenges\n\n\n🥴 Models can hallucinate making up inexistent tables, columns or functions\nSQL dialects have their nuances (SQLite, Postgres, MySQL)\n\ne.g. date manipulation, CURDATE() vs CURRENT_DATE vs GETDATE() vs SYSDATE\n\n🔒 Confidentiality of the data sent to the LLMs\n\nCan I run it on prem?\n\n\n\n\nThese are challenges relevant in the B2B space, where I work.\nDate manipulation MySQL/PostgreSQL/SQL Server/Oracle"
  },
  {
    "objectID": "buffer.html#what-were-learning-today",
    "href": "buffer.html#what-were-learning-today",
    "title": "Current OSS tooling",
    "section": "What we’re learning today",
    "text": "What we’re learning today\n\n\nCreate and validate existing state of the art techniques in the text to SQL space…\n\nStarting with public datasets but focused on tailor for propietary databases\nBenchmarking (OSS’ed framework unitxt)\n\nSupport multiple dialects (SQLite, Postgres , Presto , IBM db2 ,  CSV,  Excel, etc).\nExtensible framework supporting research and product development"
  },
  {
    "objectID": "buffer.html#engineering-goals",
    "href": "buffer.html#engineering-goals",
    "title": "Current OSS tooling",
    "section": "Engineering goals",
    "text": "Engineering goals\n\n\nInternal SaaS with 💬 chat and ↔︎️ APIs available.\n\nMulti tenancy\n\nPython SDK for developers who want to extend"
  },
  {
    "objectID": "buffer.html#spider",
    "href": "buffer.html#spider",
    "title": "Current OSS tooling",
    "section": "Spider",
    "text": "Spider\n\n\n\n\n\n\n https://yale-lily.github.io/spider\n\n\n166 SQLite databases, code repository and public leaderboard.\n\n\nIn the academic space, this is one of the oldest datasets. It was published in 2019. It consists of 166 databases, with some examples queries. There’s a JSON that enumerates the different queries."
  },
  {
    "objectID": "buffer.html#spider-1",
    "href": "buffer.html#spider-1",
    "title": "Current OSS tooling",
    "section": "Spider",
    "text": "Spider\n.\n├── train_spider.json\n├── train_others.json\n├── test.json\n├── dev.json\n├── train_gold.sql\n├── tables.json\n├── test_tables.json\n├── test_gold.sql\n├── dev_gold.sql\n├── test_database\n│   ├── bakery_1\n│   │   ├── bakery_1.sqlite\n│   │   ├── bakery_1_michi.txt\n│   │   ├── bakery_1.json\n│   │   ├── annotation.json\n│   │   ├── q.txt\n│   │   ├── bakery_1.sql\n│   │   ├── data_csv\n│   │   │   ├── items.csv\n│   │   │   ├── items (3:11:18, 5:53 PM)_original.csv\n│   │   │   ├── items_t.csv\n│   │   │   ├── receipts.csv\n│   │   │   ├── receipts (3:11:18, 5:53 PM)_original.csv\n│   │   │   ├── receipts_t.csv\n│   │   │   ├── README.BAKERY.TXT\n│   │   │   ├── goods.csv\n│   │   │   ├── goods_t.csv\n│   │   │   ├── customers.csv\n│   │   │   └── customers_t.csv\n│   │   └── link.txt\n│   ├── flight_2\n│   │   ├── flight_2.sqlite\n│   │   ├── flight_2.json\n│   │   ├── annotation.json\n│   │   ├── q.txt\n│   │   ├── flight_2.sql\n│   │   ├── data_csv\n│   │   │   ├── flights.csv\n│   │   │   ├── airports100.csv\n│   │   │   ├── README.AIRLINES.txt\n│   │   │   └── airlines.csv\n│   │   └── link.txt\n│   ├── inn_1\n│   │   ├── inn_1.sqlite\n│   │   ├── annotation.json\n│   │   ├── q.txt\n│   │   ├── change_date.py\n│   │   ├── inn_1.sql\n│   │   ├── data_csv\n│   │   │   ├── Reservations.csv\n│   │   │   ├── Reservations_t.csv\n│   │   │   ├── README.INN.TXT\n│   │   │   └── Rooms.csv\n│   │   └── link.txt\n│   ├── car_1\n│   │   ├── car_1.sqlite\n│   │   ├── car_1.json\n│   │   ├── annotation.json\n│   │   ├── q.txt\n│   │   ├── car_1.sql\n│   │   ├── data_csv\n│   │   │   ├── car-names.csv\n│   │   │   ├── cars-data.csv\n│   │   │   ├── README.CARS.TXT\n│   │   │   ├── cars.desc\n│   │   │   ├── car-makers.csv\n│   │   │   ├── model-list.csv\n│   │   │   ├── countries.csv\n│   │   │   └── continents.csv\n│   │   └── link.txt\n│   ├── book_1\n│   │   ├── book_1.sqlite\n│   │   ├── annotation.json\n│   │   ├── schema.sql\n│   │   ├── schema_old.sql\n│   │   ├── sql.txt\n│   │   ├── q.txt\n│   │   └── link.txt\n│   ├── warehouse_1\n│   │   ├── warehouse_1.sqlite\n│   │   ├── annotation.json\n│   │   ├── schema.sql\n│   │   ├── sql.txt\n│   │   ├── q.txt\n│   │   └── link.txt\n│   ├── planet_1\n│   │   ├── planet_1.sqlite\n│   │   ├── schema.sql\n│   │   ├── annotation.json\n│   │   ├── sql.txt\n│   │   ├── q.txt\n│   │   └── link.txt\n│   ├── student_1\n│   │   ├── student_1.sqlite\n│   │   ├── annotation.json\n│   │   ├── q.txt\n│   │   ├── student_1.sql\n│   │   ├── data_csv\n│   │   │   ├── README.STUDENTS.TXT\n│   │   │   ├── list.csv\n│   │   │   └── teachers.csv\n│   │   └── link.txt\n│   ├── wine_1\n│   │   ├── wine_1.sqlite\n│   │   ├── annotation.json\n│   │   ├── q.txt\n│   │   ├── wine_1.sql\n│   │   ├── data_csv\n│   │   │   ├── wine.csv\n│   │   │   ├── README.WINE.txt\n│   │   │   ├── appellations.csv\n│   │   │   └── grapes.csv\n│   │   └── link.txt\n│   ├── movie_2\n│   │   ├── movie_2.sqlite\n│   │   ├── annotation.json\n│   │   ├── schema.sql\n│   │   ├── sql.txt\n│   │   ├── q.txt\n│   │   └── link.txt\n│   ├── boat_1\n│   │   ├── boat_1.sqlite\n│   │   ├── schema.sql\n│   │   ├── Sailors.csv\n│   │   ├── Boats.csv\n│   │   └── Reserves.csv\n│   ├── formula_1\n│   │   ├── formula_1.sqlite\n│   │   ├── formula_1.sql\n│   │   ├── data_csv\n│   │   │   ├── lapTimes.csv\n│   │   │   ├── results.csv\n│   │   │   ├── driverStandings.csv\n│   │   │   ├── qualifying.csv\n│   │   │   ├── constructorStandings.csv\n│   │   │   ├── constructorResults.csv\n│   │   │   ├── pitStops.csv\n│   │   │   ├── races.csv\n│   │   │   ├── drivers.csv\n│   │   │   ├── constructors.csv\n│   │   │   ├── circuits.csv\n│   │   │   ├── seasons.csv\n│   │   │   └── status.csv\n│   │   ├── annotation.json\n│   │   └── formula_1.splite\n│   ├── pilot_1\n│   │   ├── pilot_1.sqlite\n│   │   ├── sql.txt\n│   │   ├── schema.sql\n│   │   └── link.txt\n│   ├── sing_contest\n│   │   ├── sing_contest.sqlite\n│   │   ├── schema.sql\n│   │   └── schema_old.sql\n│   ├── college_1\n│   │   ├── college_1.sqlite\n│   │   ├── TinyCollege.sql\n│   │   └── link.txt\n│   ├── vehicle_rent\n│   │   ├── vehicle_rent.sqlite\n│   │   ├── schema.sql\n│   │   └── vehicle_rent\n│   ├── art_1\n│   │   ├── art_1.sqlite\n│   │   ├── q.txt\n│   │   └── link.txt\n│   ├── club_leader\n│   │   ├── club_leader.sqlite\n│   │   ├── schema.sql\n│   │   └── schema_old.sql\n│   ├── icfp_1\n│   │   ├── icfp_1.sqlite\n│   │   ├── q.txt\n│   │   └── link.txt\n│   ├── address_1\n│   │   ├── address_1.sqlite\n│   │   ├── schema.sql\n│   │   └── link.txt\n│   ├── book_review\n│   │   ├── book_review.sqlite\n│   │   ├── schema.sql\n│   │   └── schema_old.sql\n│   ├── restaurant_bills\n│   │   ├── restaurant_bills.sqlite\n│   │   ├── schema.sql\n│   │   └── schema_old.sql\n│   ├── bike_racing\n│   │   ├── bike_racing.sqlite\n│   │   ├── schema.sql\n│   │   └── schema_old.sql\n│   ├── aan_1\n│   │   ├── aan_1.sqlite\n│   │   ├── schema.sql\n│   │   └── annotation.json\n│   ├── college_2\n│   │   ├── TextBookExampleSchema.sql\n│   │   ├── college_2.sqlite\n│   │   └── link.txt\n│   ├── flight_4\n│   │   ├── flight_4.sqlite\n│   │   ├── sql.txt\n│   │   └── link.txt\n│   ├── institution_sports\n│   │   ├── institution_sports.sqlite\n│   │   ├── schema.sql\n│   │   └── schema_old.sql\n│   ├── online_exams\n│   │   ├── online_exams.sqlite\n│   │   ├── schema.sql\n│   │   └── simple_schema.sql\n│   ├── roller_coaster\n│   │   ├── roller_coaster.sqlite\n│   │   └── schema.sql\n│   ├── assets_maintenance\n│   │   ├── assets_maintenance.sqlite\n│   │   └── schema.sql\n│   ├── region_building\n│   │   ├── region_building.sqlite\n│   │   └── schema.sql\n│   ├── party_host\n│   │   ├── party_host.sqlite\n│   │   └── schema.sql\n│   ├── ship_1\n│   │   ├── ship_1.sqlite\n│   │   └── schema.sql\n│   ├── solvency_ii\n│   │   ├── solvency_ii.sqlite\n│   │   └── schema.sql\n│   ├── products_gen_characteristics\n│   │   ├── products_gen_characteristics.sqlite\n│   │   └── schema.sql\n│   ├── dog_kennels\n│   │   ├── dog_kennels.sqlite\n│   │   └── schema.sql\n│   ├── local_govt_and_lot\n│   │   ├── local_govt_and_lot.sqlite\n│   │   └── schema.sql\n│   ├── conference\n│   │   ├── conference.sqlite\n│   │   └── schema.sql\n│   ├── video_game\n│   │   ├── video_game.sqlite\n│   │   └── schema.sql\n│   ├── culture_company\n│   │   ├── culture_company.sqlite\n│   │   └── schema.sql\n│   ├── aircraft\n│   │   ├── aircraft.sqlite\n│   │   └── schema.sql\n│   ├── musical\n│   │   ├── musical.sqlite\n│   │   └── schema.sql\n│   ├── wta_1\n│   │   ├── wta_1.sqlite\n│   │   └── wta_1.sql\n│   ├── cinema\n│   │   ├── cinema.sqlite\n│   │   └── schema.sql\n│   ├── e_commerce\n│   │   ├── e_commerce.sqlite\n│   │   └── schema.sql\n│   ├── music_1\n│   │   ├── music_1.sqlite\n│   │   └── schema.sql\n│   ├── tvshow\n│   │   ├── tvshow.sqlite\n│   │   └── schema.sql\n│   ├── gas_company\n│   │   ├── gas_company.sqlite\n│   │   └── schema.sql\n│   ├── district_spokesman\n│   │   ├── district_spokesman.sqlite\n│   │   └── schema.sql\n│   ├── customers_and_orders\n│   │   ├── customers_and_orders.sqlite\n│   │   └── schema.sql\n│   ├── network_2\n│   │   ├── network_2.sqlite\n│   │   └── schema.sql\n│   ├── match_season\n│   │   ├── match_season.sqlite\n│   │   └── schema.sql\n│   ├── phone_1\n│   │   ├── phone_1.sqlite\n│   │   └── schema.sql\n│   ├── car_road_race\n│   │   ├── car_road_race.sqlite\n│   │   └── schema.sql\n│   ├── pets_1\n│   │   ├── pets_1.sqlite\n│   │   └── schema.sql\n│   ├── tracking_grants_for_research\n│   │   ├── tracking_grants_for_research.sqlite\n│   │   └── schema.sql\n│   ├── party_people\n│   │   ├── party_people.sqlite\n│   │   └── schema.sql\n│   ├── hr_1\n│   │   ├── hr_1.sqlite\n│   │   └── schema.sql\n│   ├── government_shift\n│   │   ├── government_shift.sqlite\n│   │   └── schema.sql\n│   ├── scientist_1\n│   │   ├── scientist_1.sqlite\n│   │   └── schema.sql\n│   ├── college_3\n│   │   ├── college_3.sqlite\n│   │   └── schema.sql\n│   ├── cre_Doc_Template_Mgt\n│   │   ├── cre_Doc_Template_Mgt.sqlite\n│   │   └── schema.sql\n│   ├── restaurants\n│   │   ├── restaurants.sqlite\n│   │   └── schema.sql\n│   ├── program_share\n│   │   ├── program_share.sqlite\n│   │   └── schema.sql\n│   ├── advertising_agencies\n│   │   ├── advertising_agencies.sqlite\n│   │   └── schema.sql\n│   ├── cre_Doc_and_collections\n│   │   ├── cre_Doc_and_collections.sqlite\n│   │   └── schema.sql\n│   ├── course_teach\n│   │   ├── course_teach.sqlite\n│   │   └── schema.sql\n│   ├── candidate_poll\n│   │   ├── candidate_poll.sqlite\n│   │   └── schema.sql\n│   ├── cre_Doc_Control_Systems\n│   │   ├── cre_Doc_Control_Systems.sqlite\n│   │   └── schema.sql\n│   ├── wedding\n│   │   ├── wedding.sqlite\n│   │   └── schema.sql\n│   ├── cre_Doc_Workflow\n│   │   ├── cre_Doc_Workflow.sqlite\n│   │   └── schema.sql\n│   ├── car_racing\n│   │   ├── car_racing.sqlite\n│   │   └── schema.sql\n│   ├── yelp\n│   │   ├── yelp.sqlite\n│   │   └── schema.sql\n│   ├── document_management\n│   │   ├── document_management.sqlite\n│   │   └── schema.sql\n│   ├── news_report\n│   │   ├── news_report.sqlite\n│   │   └── schema.sql\n│   ├── loan_1\n│   │   ├── loan_1.sqlite\n│   │   └── schema.sql\n│   ├── railway\n│   │   ├── railway.sqlite\n│   │   └── schema.sql\n│   ├── geo\n│   │   ├── geo.sqlite\n│   │   └── schema.sql\n│   ├── department_management\n│   │   ├── department_management.sqlite\n│   │   └── schema.sql\n│   ├── sakila_1\n│   │   ├── sakila_1.sqlite\n│   │   └── schema.sql\n│   ├── headphone_store\n│   │   ├── headphone_store.sqlite\n│   │   └── schema.sql\n│   ├── movie_1\n│   │   ├── movie_1.sqlite\n│   │   └── schema.sql\n│   ├── flight_company\n│   │   ├── flight_company.sqlite\n│   │   └── schema.sql\n│   ├── csu_1\n│   │   ├── csu_1.sqlite\n│   │   └── schema.sql\n│   ├── company_employee\n│   │   ├── company_employee.sqlite\n│   │   └── schema.sql\n│   ├── orchestra\n│   │   ├── orchestra.sqlite\n│   │   └── schema.sql\n│   ├── customers_and_invoices\n│   │   ├── customers_and_invoices.sqlite\n│   │   └── schema.sql\n│   ├── vehicle_driver\n│   │   ├── vehicle_driver.sqlite\n│   │   └── schema.sql\n│   ├── pilot_record\n│   │   ├── pilot_record.sqlite\n│   │   └── schema.sql\n│   ├── customers_card_transactions\n│   │   ├── customers_card_transactions.sqlite\n│   │   └── schema.sql\n│   ├── machine_repair\n│   │   ├── machine_repair.sqlite\n│   │   └── schema.sql\n│   ├── real_estate_rentals\n│   │   ├── real_estate_rentals.sqlite\n│   │   └── schema.sql\n│   ├── shop_membership\n│   │   ├── shop_membership.sqlite\n│   │   └── schema.sql\n│   ├── wrestler\n│   │   ├── wrestler.sqlite\n│   │   └── schema.sql\n│   ├── performance_attendance\n│   │   ├── performance_attendance.sqlite\n│   │   └── schema.sql\n│   ├── debate\n│   │   ├── debate.sqlite\n│   │   └── schema.sql\n│   ├── bbc_channels\n│   │   ├── bbc_channels.sqlite\n│   │   └── schema.sql\n│   ├── e_learning\n│   │   ├── e_learning.sqlite\n│   │   └── schema.sql\n│   ├── customer_deliveries\n│   │   ├── customer_deliveries.sqlite\n│   │   └── schema.sql\n│   ├── academic\n│   │   ├── academic.sqlite\n│   │   └── schema.sql\n│   ├── cre_Doc_Tracking_DB\n│   │   ├── cre_Doc_Tracking_DB.sqlite\n│   │   └── schema.sql\n│   ├── bike_1\n│   │   ├── schema.sql\n│   │   └── bike_1.sqlite\n│   ├── soccer_2\n│   │   ├── soccer_2.sqlite\n│   │   └── schema.sql\n│   ├── cre_Students_Information_Systems\n│   │   ├── cre_Students_Information_Systems.sqlite\n│   │   └── schema.sql\n│   ├── entertainment_awards\n│   │   ├── entertainment_awards.sqlite\n│   │   └── schema.sql\n│   ├── department_store\n│   │   ├── department_store.sqlite\n│   │   └── schema.sql\n│   ├── customers_and_products_contacts\n│   │   ├── customers_and_products_contacts.sqlite\n│   │   └── schema.sql\n│   ├── race_track\n│   │   ├── race_track.sqlite\n│   │   └── schema.sql\n│   ├── voter_2\n│   │   ├── voter_2.sqlite\n│   │   └── schema.sql\n│   ├── museum_visit\n│   │   ├── museum_visit.sqlite\n│   │   └── schema.sql\n│   ├── driving_school\n│   │   ├── driving_school.sqlite\n│   │   └── schema.sql\n│   ├── school_finance\n│   │   ├── school_finance.sqlite\n│   │   └── schema.sql\n│   ├── browser_web\n│   │   ├── browser_web.sqlite\n│   │   └── schema.sql\n│   ├── journal_committee\n│   │   ├── journal_committee.sqlite\n│   │   └── schema.sql\n│   ├── cre_Theme_park\n│   │   ├── cre_Theme_park.sqlite\n│   │   └── schema.sql\n│   ├── club_1\n│   │   ├── club_1.sqlite\n│   │   └── schema.sql\n│   ├── school_player\n│   │   ├── school_player.sqlite\n│   │   └── schema.sql\n│   ├── decoration_competition\n│   │   ├── decoration_competition.sqlite\n│   │   └── schema.sql\n│   ├── manufactory_1\n│   │   ├── manufactory_1.sqlite\n│   │   └── schema.sql\n│   ├── architecture\n│   │   ├── architecture.sqlite\n│   │   └── schema.sql\n│   ├── train_station\n│   │   ├── train_station.sqlite\n│   │   └── schema.sql\n│   ├── allergy_1\n│   │   ├── allergy_1.sqlite\n│   │   └── schema.sql\n│   ├── soccer_1\n│   │   ├── schema.sql\n│   │   └── soccer_1.sqlite\n│   ├── flight_1\n│   │   ├── flight_1.sqlite\n│   │   └── schema.sql\n│   ├── election_representative\n│   │   ├── election_representative.sqlite\n│   │   └── schema.sql\n│   ├── store_product\n│   │   ├── store_product.sqlite\n│   │   └── schema.sql\n│   ├── customers_campaigns_ecommerce\n│   │   ├── customers_campaigns_ecommerce.sqlite\n│   │   └── schema.sql\n│   ├── storm_record\n│   │   ├── storm_record.sqlite\n│   │   └── schema.sql\n│   ├── poker_player\n│   │   ├── poker_player.sqlite\n│   │   └── schema.sql\n│   ├── customer_complaints\n│   │   ├── customer_complaints.sqlite\n│   │   └── schema.sql\n│   ├── company_1\n│   │   ├── company_1.sqlite\n│   │   └── link.txt\n│   ├── concert_singer\n│   │   ├── concert_singer.sqlite\n│   │   └── schema.sql\n│   ├── soccer_3\n│   │   ├── soccer_3.sqlite\n│   │   └── schema.sql\n│   ├── tv_shows\n│   │   ├── tv_shows.sqlite\n│   │   └── schema.sql\n│   ├── cre_Docs_and_Epenses\n│   │   ├── cre_Docs_and_Epenses.sqlite\n│   │   └── schema.sql\n│   ├── insurance_and_eClaims\n│   │   ├── insurance_and_eClaims.sqlite\n│   │   └── schema.sql\n│   ├── insurance_policies\n│   │   ├── insurance_policies.sqlite\n│   │   └── schema.sql\n│   ├── county_public_safety\n│   │   ├── county_public_safety.sqlite\n│   │   └── schema.sql\n│   ├── baseball_1\n│   │   ├── schema.sql\n│   │   └── baseball_1.sqlite\n│   ├── imdb\n│   │   ├── imdb.sqlite\n│   │   └── schema.sql\n│   ├── music_2\n│   │   ├── music_2.sqlite\n│   │   └── schema.sql\n│   ├── network_1\n│   │   ├── network_1.sqlite\n│   │   └── schema.sql\n│   ├── climbing\n│   │   ├── climbing.sqlite\n│   │   └── schema.sql\n│   ├── swimming\n│   │   ├── swimming.sqlite\n│   │   └── schema.sql\n│   ├── customers_and_addresses\n│   │   ├── customers_and_addresses.sqlite\n│   │   └── schema.sql\n│   ├── tracking_share_transactions\n│   │   ├── tracking_share_transactions.sqlite\n│   │   └── schema.sql\n│   ├── game_1\n│   │   ├── game_1.sqlite\n│   │   └── schema.sql\n│   ├── cre_Drama_Workshop_Groups\n│   │   ├── cre_Drama_Workshop_Groups.sqlite\n│   │   └── schema.sql\n│   ├── election\n│   │   ├── election.sqlite\n│   │   └── schema.sql\n│   ├── book_2\n│   │   ├── book_2.sqlite\n│   │   └── schema.sql\n│   ├── music_4\n│   │   ├── music_4.sqlite\n│   │   └── schema.sql\n│   ├── body_builder\n│   │   ├── body_builder.sqlite\n│   │   └── schema.sql\n│   ├── local_govt_in_alabama\n│   │   ├── local_govt_in_alabama.sqlite\n│   │   └── schema.sql\n│   ├── device\n│   │   ├── device.sqlite\n│   │   └── schema.sql\n│   ├── sports_competition\n│   │   ├── sports_competition.sqlite\n│   │   └── schema.sql\n│   ├── workshop_paper\n│   │   ├── workshop_paper.sqlite\n│   │   └── schema.sql\n│   ├── tracking_orders\n│   │   ├── tracking_orders.sqlite\n│   │   └── schema.sql\n│   ├── school_bus\n│   │   ├── school_bus.sqlite\n│   │   └── schema.sql\n│   ├── protein_institute\n│   │   ├── protein_institute.sqlite\n│   │   └── schema.sql\n│   ├── activity_1\n│   │   ├── activity_1.sqlite\n│   │   └── schema.sql\n│   ├── phone_market\n│   │   ├── phone_market.sqlite\n│   │   └── schema.sql\n│   ├── entrepreneur\n│   │   ├── entrepreneur.sqlite\n│   │   └── schema.sql\n│   ├── apartment_rentals\n│   │   ├── apartment_rentals.sqlite\n│   │   └── schema.sql\n│   ├── medicine_enzyme_interaction\n│   │   ├── medicine_enzyme_interaction.sqlite\n│   │   └── schema.sql\n│   ├── gymnast\n│   │   ├── gymnast.sqlite\n│   │   └── schema.sql\n│   ├── perpetrator\n│   │   ├── perpetrator.sqlite\n│   │   └── schema.sql\n│   ├── store_1\n│   │   ├── schema.sql\n│   │   └── store_1.sqlite\n│   ├── station_weather\n│   │   ├── station_weather.sqlite\n│   │   └── schema.sql\n│   ├── employee_hire_evaluation\n│   │   ├── employee_hire_evaluation.sqlite\n│   │   └── schema.sql\n│   ├── manufacturer\n│   │   ├── manufacturer.sqlite\n│   │   └── schema.sql\n│   ├── local_govt_mdm\n│   │   ├── local_govt_mdm.sqlite\n│   │   └── schema.sql\n│   ├── company_office\n│   │   ├── company_office.sqlite\n│   │   └── schema.sql\n│   ├── battle_death\n│   │   ├── battle_death.sqlite\n│   │   └── schema.sql\n│   ├── dorm_1\n│   │   ├── dorm_1.sqlite\n│   │   └── schema.sql\n│   ├── products_for_hire\n│   │   ├── products_for_hire.sqlite\n│   │   └── schema.sql\n│   ├── hospital_1\n│   │   ├── hospital_1.sqlite\n│   │   └── schema.sql\n│   ├── coffee_shop\n│   │   ├── coffee_shop.sqlite\n│   │   └── schema.sql\n│   ├── singer\n│   │   ├── singer.sqlite\n│   │   └── schema.sql\n│   ├── chinook_1\n│   │   ├── chinook_1.sqlite\n│   │   └── annotation.json\n│   ├── behavior_monitoring\n│   │   ├── behavior_monitoring.sqlite\n│   │   └── schema.sql\n│   ├── world_1\n│   │   ├── world_1.sqlite\n│   │   └── world_1.json\n│   ├── game_injury\n│   │   ├── game_injury.sqlite\n│   │   └── schema.sql\n│   ├── university_basketball\n│   │   ├── university_basketball.sqlite\n│   │   └── schema.sql\n│   ├── mountain_photos\n│   │   ├── mountain_photos.sqlite\n│   │   └── schema.sql\n│   ├── scholar\n│   │   ├── scholar.sqlite\n│   │   └── schema.sql\n│   ├── product_catalog\n│   │   ├── product_catalog.sqlite\n│   │   └── schema.sql\n│   ├── real_estate_properties\n│   │   ├── real_estate_properties.sqlite\n│   │   └── schema.sql\n│   ├── student_transcripts_tracking\n│   │   ├── student_transcripts_tracking.sqlite\n│   │   └── schema.sql\n│   ├── twitter_1\n│   │   ├── twitter_1.sqlite\n│   │   └── queries\n│   │       ├── oracle-dialects.xml\n│   │       ├── postgres-dialects.xml\n│   │       └── sqlserver-dialects.xml\n│   ├── film_rank\n│   │   ├── film_rank.sqlite\n│   │   └── schema.sql\n│   ├── theme_gallery\n│   │   ├── theme_gallery.sqlite\n│   │   └── schema.sql\n│   ├── farm\n│   │   ├── farm.sqlite\n│   │   └── schema.sql\n│   ├── university_rank\n│   │   ├── university_rank.sqlite\n│   │   └── schema.sql\n│   ├── book_press\n│   │   ├── book_press.sqlite\n│   │   └── schema.sql\n│   ├── e_government\n│   │   ├── e_government.sqlite\n│   │   └── schema.sql\n│   ├── insurance_fnol\n│   │   ├── insurance_fnol.sqlite\n│   │   └── schema.sql\n│   ├── restaurant_1\n│   │   ├── restaurant_1.sqlite\n│   │   └── schema.sql\n│   ├── country_language\n│   │   ├── country_language.sqlite\n│   │   └── schema.sql\n│   ├── tracking_software_problems\n│   │   ├── tracking_software_problems.sqlite\n│   │   └── schema.sql\n│   ├── riding_club\n│   │   ├── riding_club.sqlite\n│   │   └── schema.sql\n│   ├── ship_mission\n│   │   ├── ship_mission.sqlite\n│   │   └── schema.sql\n│   ├── student_assessment\n│   │   ├── student_assessment.sqlite\n│   │   └── schema.sql\n│   ├── city_record\n│   │   ├── city_record.sqlite\n│   │   └── schema.sql\n│   ├── epinions_1\n│   │   └── epinions_1.sqlite\n│   ├── voter_1\n│   │   └── voter_1.sqlite\n│   └── small_bank_1\n│       └── small_bank_1.sqlite\n├── README.txt\n└── database\n    ├── inn_1\n    │   ├── inn_1.sqlite\n    │   ├── annotation.json\n    │   ├── q.txt\n    │   ├── change_date.py\n    │   ├── inn_1.sql\n    │   ├── data_csv\n    │   │   ├── Reservations.csv\n    │   │   ├── Reservations_t.csv\n    │   │   ├── README.INN.TXT\n    │   │   └── Rooms.csv\n    │   └── link.txt\n    ├── flight_2\n    │   ├── flight_2.sqlite\n    │   ├── flight_2.json\n    │   ├── annotation.json\n    │   ├── q.txt\n    │   ├── flight_2.sql\n    │   ├── data_csv\n    │   │   ├── flights.csv\n    │   │   ├── airports100.csv\n    │   │   ├── README.AIRLINES.txt\n    │   │   └── airlines.csv\n    │   └── link.txt\n    ├── car_1\n    │   ├── car_1.sqlite\n    │   ├── car_1.json\n    │   ├── annotation.json\n    │   ├── q.txt\n    │   ├── car_1.sql\n    │   ├── data_csv\n    │   │   ├── car-names.csv\n    │   │   ├── cars-data.csv\n    │   │   ├── README.CARS.TXT\n    │   │   ├── cars.desc\n    │   │   ├── car-makers.csv\n    │   │   ├── model-list.csv\n    │   │   ├── countries.csv\n    │   │   └── continents.csv\n    │   └── link.txt\n    ├── wine_1\n    │   ├── wine_1.sqlite\n    │   ├── annotation.json\n    │   ├── q.txt\n    │   ├── wine_1.sql\n    │   ├── data_csv\n    │   │   ├── wine.csv\n    │   │   ├── README.WINE.txt\n    │   │   ├── appellations.csv\n    │   │   └── grapes.csv\n    │   └── link.txt\n    ├── student_1\n    │   ├── student_1.sqlite\n    │   ├── annotation.json\n    │   ├── q.txt\n    │   ├── student_1.sql\n    │   ├── data_csv\n    │   │   ├── README.STUDENTS.TXT\n    │   │   ├── list.csv\n    │   │   └── teachers.csv\n    │   └── link.txt\n    ├── formula_1\n    │   ├── formula_1.sqlite\n    │   ├── formula_1.sql\n    │   ├── data_csv\n    │   │   ├── lapTimes.csv\n    │   │   ├── results.csv\n    │   │   ├── driverStandings.csv\n    │   │   ├── qualifying.csv\n    │   │   ├── constructorStandings.csv\n    │   │   ├── constructorResults.csv\n    │   │   ├── pitStops.csv\n    │   │   ├── races.csv\n    │   │   ├── drivers.csv\n    │   │   ├── constructors.csv\n    │   │   ├── circuits.csv\n    │   │   ├── seasons.csv\n    │   │   └── status.csv\n    │   ├── annotation.json\n    │   └── formula_1.splite\n    ├── college_1\n    │   ├── college_1.sqlite\n    │   ├── TinyCollege.sql\n    │   └── link.txt\n    ├── flight_4\n    │   ├── flight_4.sqlite\n    │   ├── sql.txt\n    │   └── link.txt\n    ├── icfp_1\n    │   ├── icfp_1.sqlite\n    │   ├── q.txt\n    │   └── link.txt\n    ├── college_2\n    │   ├── TextBookExampleSchema.sql\n    │   ├── college_2.sqlite\n    │   └── link.txt\n    ├── decoration_competition\n    │   ├── decoration_competition.sqlite\n    │   └── schema.sql\n    ├── assets_maintenance\n    │   ├── assets_maintenance.sqlite\n    │   └── schema.sql\n    ├── cre_Theme_park\n    │   ├── cre_Theme_park.sqlite\n    │   └── schema.sql\n    ├── museum_visit\n    │   ├── museum_visit.sqlite\n    │   └── schema.sql\n    ├── race_track\n    │   ├── race_track.sqlite\n    │   └── schema.sql\n    ├── soccer_2\n    │   ├── soccer_2.sqlite\n    │   └── schema.sql\n    ├── bike_1\n    │   ├── schema.sql\n    │   └── bike_1.sqlite\n    ├── pilot_record\n    │   ├── pilot_record.sqlite\n    │   └── schema.sql\n    ├── customers_and_invoices\n    │   ├── customers_and_invoices.sqlite\n    │   └── schema.sql\n    ├── department_management\n    │   ├── department_management.sqlite\n    │   └── schema.sql\n    ├── news_report\n    │   ├── news_report.sqlite\n    │   └── schema.sql\n    ├── tvshow\n    │   ├── tvshow.sqlite\n    │   └── schema.sql\n    ├── music_1\n    │   ├── music_1.sqlite\n    │   └── schema.sql\n    ├── store_product\n    │   ├── store_product.sqlite\n    │   └── schema.sql\n    ├── party_host\n    │   ├── party_host.sqlite\n    │   └── schema.sql\n    ├── ship_1\n    │   ├── ship_1.sqlite\n    │   └── schema.sql\n    ├── solvency_ii\n    │   ├── solvency_ii.sqlite\n    │   └── schema.sql\n    ├── products_gen_characteristics\n    │   ├── products_gen_characteristics.sqlite\n    │   └── schema.sql\n    ├── dog_kennels\n    │   ├── dog_kennels.sqlite\n    │   └── schema.sql\n    ├── local_govt_and_lot\n    │   ├── local_govt_and_lot.sqlite\n    │   └── schema.sql\n    ├── culture_company\n    │   ├── culture_company.sqlite\n    │   └── schema.sql\n    ├── aircraft\n    │   ├── aircraft.sqlite\n    │   └── schema.sql\n    ├── wta_1\n    │   ├── wta_1.sqlite\n    │   └── wta_1.sql\n    ├── cinema\n    │   ├── cinema.sqlite\n    │   └── schema.sql\n    ├── musical\n    │   ├── musical.sqlite\n    │   └── schema.sql\n    ├── flight_1\n    │   ├── flight_1.sqlite\n    │   └── schema.sql\n    ├── gas_company\n    │   ├── gas_company.sqlite\n    │   └── schema.sql\n    ├── network_2\n    │   ├── network_2.sqlite\n    │   └── schema.sql\n    ├── match_season\n    │   ├── match_season.sqlite\n    │   └── schema.sql\n    ├── phone_1\n    │   ├── phone_1.sqlite\n    │   └── schema.sql\n    ├── pets_1\n    │   ├── pets_1.sqlite\n    │   └── schema.sql\n    ├── tracking_grants_for_research\n    │   ├── tracking_grants_for_research.sqlite\n    │   └── schema.sql\n    ├── party_people\n    │   ├── party_people.sqlite\n    │   └── schema.sql\n    ├── hr_1\n    │   ├── hr_1.sqlite\n    │   └── schema.sql\n    ├── scientist_1\n    │   ├── scientist_1.sqlite\n    │   └── schema.sql\n    ├── college_3\n    │   ├── college_3.sqlite\n    │   └── schema.sql\n    ├── cre_Doc_Template_Mgt\n    │   ├── cre_Doc_Template_Mgt.sqlite\n    │   └── schema.sql\n    ├── restaurants\n    │   ├── restaurants.sqlite\n    │   └── schema.sql\n    ├── program_share\n    │   ├── program_share.sqlite\n    │   └── schema.sql\n    ├── storm_record\n    │   ├── storm_record.sqlite\n    │   └── schema.sql\n    ├── course_teach\n    │   ├── course_teach.sqlite\n    │   └── schema.sql\n    ├── candidate_poll\n    │   ├── candidate_poll.sqlite\n    │   └── schema.sql\n    ├── cre_Doc_Control_Systems\n    │   ├── cre_Doc_Control_Systems.sqlite\n    │   └── schema.sql\n    ├── wedding\n    │   ├── wedding.sqlite\n    │   └── schema.sql\n    ├── yelp\n    │   ├── yelp.sqlite\n    │   └── schema.sql\n    ├── document_management\n    │   ├── document_management.sqlite\n    │   └── schema.sql\n    ├── loan_1\n    │   ├── loan_1.sqlite\n    │   └── schema.sql\n    ├── railway\n    │   ├── railway.sqlite\n    │   └── schema.sql\n    ├── geo\n    │   ├── geo.sqlite\n    │   └── schema.sql\n    ├── sakila_1\n    │   ├── sakila_1.sqlite\n    │   └── schema.sql\n    ├── movie_1\n    │   ├── movie_1.sqlite\n    │   └── schema.sql\n    ├── flight_company\n    │   ├── flight_company.sqlite\n    │   └── schema.sql\n    ├── csu_1\n    │   ├── csu_1.sqlite\n    │   └── schema.sql\n    ├── company_employee\n    │   ├── company_employee.sqlite\n    │   └── schema.sql\n    ├── orchestra\n    │   ├── orchestra.sqlite\n    │   └── schema.sql\n    ├── perpetrator\n    │   ├── perpetrator.sqlite\n    │   └── schema.sql\n    ├── customers_card_transactions\n    │   ├── customers_card_transactions.sqlite\n    │   └── schema.sql\n    ├── machine_repair\n    │   ├── machine_repair.sqlite\n    │   └── schema.sql\n    ├── shop_membership\n    │   ├── shop_membership.sqlite\n    │   └── schema.sql\n    ├── wrestler\n    │   ├── wrestler.sqlite\n    │   └── schema.sql\n    ├── performance_attendance\n    │   ├── performance_attendance.sqlite\n    │   └── schema.sql\n    ├── debate\n    │   ├── debate.sqlite\n    │   └── schema.sql\n    ├── station_weather\n    │   ├── station_weather.sqlite\n    │   └── schema.sql\n    ├── e_learning\n    │   ├── e_learning.sqlite\n    │   └── schema.sql\n    ├── customer_deliveries\n    │   ├── customer_deliveries.sqlite\n    │   └── schema.sql\n    ├── academic\n    │   ├── academic.sqlite\n    │   └── schema.sql\n    ├── cre_Doc_Tracking_DB\n    │   ├── cre_Doc_Tracking_DB.sqlite\n    │   └── schema.sql\n    ├── entertainment_awards\n    │   ├── entertainment_awards.sqlite\n    │   └── schema.sql\n    ├── department_store\n    │   ├── department_store.sqlite\n    │   └── schema.sql\n    ├── customers_and_products_contacts\n    │   ├── customers_and_products_contacts.sqlite\n    │   └── schema.sql\n    ├── voter_2\n    │   ├── voter_2.sqlite\n    │   └── schema.sql\n    ├── driving_school\n    │   ├── driving_school.sqlite\n    │   └── schema.sql\n    ├── school_finance\n    │   ├── school_finance.sqlite\n    │   └── schema.sql\n    ├── roller_coaster\n    │   ├── roller_coaster.sqlite\n    │   └── schema.sql\n    ├── journal_committee\n    │   ├── journal_committee.sqlite\n    │   └── schema.sql\n    ├── manufacturer\n    │   ├── manufacturer.sqlite\n    │   └── schema.sql\n    ├── club_1\n    │   ├── club_1.sqlite\n    │   └── schema.sql\n    ├── school_player\n    │   ├── school_player.sqlite\n    │   └── schema.sql\n    ├── browser_web\n    │   ├── browser_web.sqlite\n    │   └── schema.sql\n    ├── architecture\n    │   ├── architecture.sqlite\n    │   └── schema.sql\n    ├── train_station\n    │   ├── train_station.sqlite\n    │   └── schema.sql\n    ├── allergy_1\n    │   ├── allergy_1.sqlite\n    │   └── schema.sql\n    ├── soccer_1\n    │   ├── schema.sql\n    │   └── soccer_1.sqlite\n    ├── election_representative\n    │   ├── election_representative.sqlite\n    │   └── schema.sql\n    ├── city_record\n    │   ├── city_record.sqlite\n    │   └── schema.sql\n    ├── manufactory_1\n    │   ├── manufactory_1.sqlite\n    │   └── schema.sql\n    ├── hospital_1\n    │   ├── hospital_1.sqlite\n    │   └── schema.sql\n    ├── poker_player\n    │   ├── poker_player.sqlite\n    │   └── schema.sql\n    ├── customer_complaints\n    │   ├── customer_complaints.sqlite\n    │   └── schema.sql\n    ├── company_1\n    │   ├── company_1.sqlite\n    │   └── link.txt\n    ├── concert_singer\n    │   ├── concert_singer.sqlite\n    │   └── schema.sql\n    ├── cre_Docs_and_Epenses\n    │   ├── cre_Docs_and_Epenses.sqlite\n    │   └── schema.sql\n    ├── insurance_and_eClaims\n    │   ├── insurance_and_eClaims.sqlite\n    │   └── schema.sql\n    ├── insurance_policies\n    │   ├── insurance_policies.sqlite\n    │   └── schema.sql\n    ├── county_public_safety\n    │   ├── county_public_safety.sqlite\n    │   └── schema.sql\n    ├── baseball_1\n    │   ├── schema.sql\n    │   └── baseball_1.sqlite\n    ├── imdb\n    │   ├── imdb.sqlite\n    │   └── schema.sql\n    ├── music_2\n    │   ├── music_2.sqlite\n    │   └── schema.sql\n    ├── network_1\n    │   ├── network_1.sqlite\n    │   └── schema.sql\n    ├── climbing\n    │   ├── climbing.sqlite\n    │   └── schema.sql\n    ├── swimming\n    │   ├── swimming.sqlite\n    │   └── schema.sql\n    ├── customers_and_addresses\n    │   ├── customers_and_addresses.sqlite\n    │   └── schema.sql\n    ├── tracking_share_transactions\n    │   ├── tracking_share_transactions.sqlite\n    │   └── schema.sql\n    ├── game_1\n    │   ├── game_1.sqlite\n    │   └── schema.sql\n    ├── cre_Drama_Workshop_Groups\n    │   ├── cre_Drama_Workshop_Groups.sqlite\n    │   └── schema.sql\n    ├── election\n    │   ├── election.sqlite\n    │   └── schema.sql\n    ├── book_2\n    │   ├── book_2.sqlite\n    │   └── schema.sql\n    ├── music_4\n    │   ├── music_4.sqlite\n    │   └── schema.sql\n    ├── body_builder\n    │   ├── body_builder.sqlite\n    │   └── schema.sql\n    ├── local_govt_in_alabama\n    │   ├── local_govt_in_alabama.sqlite\n    │   └── schema.sql\n    ├── device\n    │   ├── device.sqlite\n    │   └── schema.sql\n    ├── sports_competition\n    │   ├── sports_competition.sqlite\n    │   └── schema.sql\n    ├── workshop_paper\n    │   ├── workshop_paper.sqlite\n    │   └── schema.sql\n    ├── tracking_orders\n    │   ├── tracking_orders.sqlite\n    │   └── schema.sql\n    ├── school_bus\n    │   ├── school_bus.sqlite\n    │   └── schema.sql\n    ├── protein_institute\n    │   ├── protein_institute.sqlite\n    │   └── schema.sql\n    ├── activity_1\n    │   ├── activity_1.sqlite\n    │   └── schema.sql\n    ├── phone_market\n    │   ├── phone_market.sqlite\n    │   └── schema.sql\n    ├── entrepreneur\n    │   ├── entrepreneur.sqlite\n    │   └── schema.sql\n    ├── apartment_rentals\n    │   ├── apartment_rentals.sqlite\n    │   └── schema.sql\n    ├── medicine_enzyme_interaction\n    │   ├── medicine_enzyme_interaction.sqlite\n    │   └── schema.sql\n    ├── gymnast\n    │   ├── gymnast.sqlite\n    │   └── schema.sql\n    ├── game_injury\n    │   ├── game_injury.sqlite\n    │   └── schema.sql\n    ├── store_1\n    │   ├── schema.sql\n    │   └── store_1.sqlite\n    ├── employee_hire_evaluation\n    │   ├── employee_hire_evaluation.sqlite\n    │   └── schema.sql\n    ├── twitter_1\n    │   ├── twitter_1.sqlite\n    │   └── queries\n    │       ├── oracle-dialects.xml\n    │       ├── postgres-dialects.xml\n    │       └── sqlserver-dialects.xml\n    ├── local_govt_mdm\n    │   ├── local_govt_mdm.sqlite\n    │   └── schema.sql\n    ├── company_office\n    │   ├── company_office.sqlite\n    │   └── schema.sql\n    ├── battle_death\n    │   ├── battle_death.sqlite\n    │   └── schema.sql\n    ├── dorm_1\n    │   ├── dorm_1.sqlite\n    │   └── schema.sql\n    ├── products_for_hire\n    │   ├── products_for_hire.sqlite\n    │   └── schema.sql\n    ├── coffee_shop\n    │   ├── coffee_shop.sqlite\n    │   └── schema.sql\n    ├── singer\n    │   ├── singer.sqlite\n    │   └── schema.sql\n    ├── chinook_1\n    │   ├── chinook_1.sqlite\n    │   └── annotation.json\n    ├── behavior_monitoring\n    │   ├── behavior_monitoring.sqlite\n    │   └── schema.sql\n    ├── world_1\n    │   ├── world_1.sqlite\n    │   └── world_1.json\n    ├── university_basketball\n    │   ├── university_basketball.sqlite\n    │   └── schema.sql\n    ├── mountain_photos\n    │   ├── mountain_photos.sqlite\n    │   └── schema.sql\n    ├── scholar\n    │   ├── scholar.sqlite\n    │   └── schema.sql\n    ├── product_catalog\n    │   ├── product_catalog.sqlite\n    │   └── schema.sql\n    ├── real_estate_properties\n    │   ├── real_estate_properties.sqlite\n    │   └── schema.sql\n    ├── student_transcripts_tracking\n    │   ├── student_transcripts_tracking.sqlite\n    │   └── schema.sql\n    ├── film_rank\n    │   ├── film_rank.sqlite\n    │   └── schema.sql\n    ├── theme_gallery\n    │   ├── theme_gallery.sqlite\n    │   └── schema.sql\n    ├── e_government\n    │   ├── e_government.sqlite\n    │   └── schema.sql\n    ├── insurance_fnol\n    │   ├── insurance_fnol.sqlite\n    │   └── schema.sql\n    ├── restaurant_1\n    │   ├── restaurant_1.sqlite\n    │   └── schema.sql\n    ├── farm\n    │   ├── farm.sqlite\n    │   └── schema.sql\n    ├── tracking_software_problems\n    │   ├── tracking_software_problems.sqlite\n    │   └── schema.sql\n    ├── riding_club\n    │   ├── riding_club.sqlite\n    │   └── schema.sql\n    ├── ship_mission\n    │   ├── ship_mission.sqlite\n    │   └── schema.sql\n    ├── student_assessment\n    │   ├── student_assessment.sqlite\n    │   └── schema.sql\n    ├── customers_campaigns_ecommerce\n    │   ├── customers_campaigns_ecommerce.sqlite\n    │   └── schema.sql\n    ├── epinions_1\n    │   └── epinions_1.sqlite\n    ├── voter_1\n    │   └── voter_1.sqlite\n    └── small_bank_1\n        └── small_bank_1.sqlite"
  },
  {
    "objectID": "buffer.html#spiders-test_gold.sql",
    "href": "buffer.html#spiders-test_gold.sql",
    "title": "Current OSS tooling",
    "section": "SPIDER’s test_gold.sql",
    "text": "SPIDER’s test_gold.sql\ndb_id: department_management\nquery: SELECT count(*) FROM head WHERE age  &gt;  56\nquery_toks:\n  - SELECT\n  - count\n  - (\n  - '*'\n  - )\n  - FROM\n  - head\n  - WHERE\n  - age\n  - '&gt;'\n  - \"56\"\nquery_toks_no_value:\n  - select\n  - count\n  - (\n  - '*'\n  - )\n  - from\n  - head\n  - where\n  - age\n  - '&gt;'\n  - value\nquestion: How many heads of the departments are older than 56 ?\nquestion_toks:\n  - How\n  - many\n  - heads\n  - of\n  - the\n  - departments\n  - are\n  - older\n  - than\n  - \"56\"\n  - '?'\nsql:\n  from:\n    table_units:\n      - - table_unit\n        - 1\n    conds: []\n  select:\n    - false\n    - - - 3\n        - - 0\n          - - 0\n            - 0\n            - false\n          - null\n  where:\n    - - false\n      - 3\n      - - 0\n        - - 0\n          - 10\n          - false\n        - null\n      - 56\n      - null\n  groupBy: []\n  having: []\n  orderBy: []\n  limit: null\n  intersect: null\n  union: null\n  except: null\n\nThis is the structure of Spider 1, it has some structure that can be used to fine tune the LLMs.\n\n\n\nSPIDER’s SQLite ER for the 👆 query\n\n\n\n\n\n\nThs"
  },
  {
    "objectID": "buffer.html#complexity-in-spider-easy",
    "href": "buffer.html#complexity-in-spider-easy",
    "title": "Current OSS tooling",
    "section": "Complexity in Spider, easy",
    "text": "Complexity in Spider, easy\n\n\nWhat is the number of cars with more than 4 cylinders?\n\nSELECT COUNT (*)\nFROM cars data\nWHERE Cylinders &gt; 4"
  },
  {
    "objectID": "buffer.html#complexity-in-spider-medium",
    "href": "buffer.html#complexity-in-spider-medium",
    "title": "Current OSS tooling",
    "section": "Complexity in Spider, medium",
    "text": "Complexity in Spider, medium\n\n\nFor each stadium, how many concerts are there?\n\nSELECT T2.name, COUNT (*)\nFROM concert AS T1 JOIN stadium AS T2\nON T1.stadium_id = T2.stadium_id\nGROUP BY I1.stadium_id\n\n\n. . .\n\nAdds aliases"
  },
  {
    "objectID": "buffer.html#complexity-in-spider-hard",
    "href": "buffer.html#complexity-in-spider-hard",
    "title": "Current OSS tooling",
    "section": "Complexity in Spider, hard",
    "text": "Complexity in Spider, hard\n\n\nWhich countries in Europe have at least 3 car manufacturers?\n\nSELECT T1.country_name\nFROM countries AS T1 JOIN continents\nAS I2 ON T1.continent = I2.cont_id\nJOIN car_makers AS I3 ON\nI1.country_id = I3.country\nWHERE T2.continent = 'Europe'\nGROUP BY I1.country_name\nHAVING COUNT (*) &gt;= 3\n\n\n. . .\n\nHas more than one JOIN"
  },
  {
    "objectID": "buffer.html#complexity-in-spider-extra-hard",
    "href": "buffer.html#complexity-in-spider-extra-hard",
    "title": "Current OSS tooling",
    "section": "Complexity in Spider, extra hard",
    "text": "Complexity in Spider, extra hard\n\n\nWhat is the average life expectancy in the countries where English is not the official language?\n\nSELECT AVG (life_expectancy)\nFROM country\nWHERE naME NOT IN (SELECT T1.name\nFROM Country AS TI JOIN country_language AS T2\nON T1.code = T2.country_code\nWHERE T2. language = \"English\"\nAND T2.is_official = \"T\")\n\n\n. . .\n\nAdds subquery (SELECT ... FROM ...)\n\n\n\nSpider leaderboard\n\n\n\n\n\n\n#TODO put IBM \n\n\nAlthough in 2019 these were quite challenging questions for LLMs, today we have high accuracy levels in the leaderboard"
  },
  {
    "objectID": "buffer.html#spider-2",
    "href": "buffer.html#spider-2",
    "title": "Current OSS tooling",
    "section": "Spider 2",
    "text": "Spider 2\n\n\n\n\n\n. . .\nComes in 3 flavours\n\n\n\n\n\n\n\nSQLite\n\ndbt\n\n\n\n fix style up👆\n\n\n\nSpider 2"
  },
  {
    "objectID": "buffer.html#bird",
    "href": "buffer.html#bird",
    "title": "Current OSS tooling",
    "section": "BIRD",
    "text": "BIRD\n\n\n\n\n\n\n https://bird-bench.github.io/\n\n\nThis\n\n\n\n\n\n\nBIRD structure\n.\n├── dev_databases.zip\n├── dev.json\n├── dev.sql\n├── dev_tables.json\n├── dev_tied_append.json\n└── dev_databases\n    ├── debit_card_specializing\n    │   ├── debit_card_specializing.sqlite\n    │   └── database_description\n    │       ├── transactions_1k.csv\n    │       ├── gasstations.csv\n    │       ├── customers.csv\n    │       ├── yearmonth.csv\n    │       └── products.csv\n    ├── financial\n    │   ├── financial.sqlite\n    │   └── database_description\n    │       ├── trans.csv\n    │       ├── district.csv\n    │       ├── loan.csv\n    │       ├── order.csv\n    │       ├── account.csv\n    │       ├── disp.csv\n    │       ├── card.csv\n    │       └── client.csv\n    ├── formula_1\n    │   ├── formula_1.sqlite\n    │   └── database_description\n    │       ├── qualifying.csv\n    │       ├── results.csv\n    │       ├── circuits.csv\n    │       ├── drivers.csv\n    │       ├── driverStandings.csv\n    │       ├── constructorStandings.csv\n    │       ├── constructors.csv\n    │       ├── lapTimes.csv\n    │       ├── pitStops.csv\n    │       ├── races.csv\n    │       ├── constructorResults.csv\n    │       ├── seasons.csv\n    │       └── status.csv\n    ├── california_schools\n    │   ├── california_schools.sqlite\n    │   └── database_description\n    │       ├── frpm.csv\n    │       └── satscores.csv\n    ├── card_games\n    │   ├── card_games.sqlite\n    │   └── database_description\n    │       ├── cards.csv\n    │       ├── sets.csv\n    │       ├── foreign_data.csv\n    │       ├── legalities.csv\n    │       ├── set_translations.csv\n    │       └── rulings.csv\n    ├── european_football_2\n    │   ├── european_football_2.sqlite\n    │   └── database_description\n    │       ├── Player_Attributes.csv\n    │       ├── Team_Attributes.csv\n    │       ├── Match.csv\n    │       ├── Player.csv\n    │       ├── Team.csv\n    │       ├── League.csv\n    │       └── Country.csv\n    ├── thrombosis_prediction\n    │   ├── thrombosis_prediction.sqlite\n    │   └── database_description\n    │       ├── Laboratory.csv\n    │       ├── Examination.csv\n    │       └── Patient.csv\n    ├── toxicology\n    │   ├── toxicology.sqlite\n    │   └── database_description\n    │       ├── atom.csv\n    │       ├── bond.csv\n    │       ├── molecule.csv\n    │       └── connected.csv\n    ├── student_club\n    │   ├── student_club.sqlite\n    │   └── database_description\n    │       ├── budget.csv\n    │       ├── member.csv\n    │       ├── expense.csv\n    │       ├── zip_code.csv\n    │       ├── event.csv\n    │       ├── income.csv\n    │       ├── major.csv\n    │       └── attendance.csv\n    ├── superhero\n    │   ├── superhero.sqlite\n    │   └── database_description\n    │       ├── superhero.csv\n    │       ├── alignment.csv\n    │       ├── hero_attribute.csv\n    │       ├── attribute.csv\n    │       ├── hero_power.csv\n    │       ├── race.csv\n    │       ├── colour.csv\n    │       ├── superpower.csv\n    │       ├── publisher.csv\n    │       └── gender.csv\n    └── codebase_community\n        ├── codebase_community.sqlite\n        └── database_description\n            ├── posts.csv\n            ├── users.csv\n            ├── comments.csv\n            ├── postHistory.csv\n            ├── votes.csv\n            ├── tags.csv\n            ├── postLinks.csv\n            └── badges.csv"
  },
  {
    "objectID": "buffer.html#bird-example-queries",
    "href": "buffer.html#bird-example-queries",
    "title": "Current OSS tooling",
    "section": "BIRD example queries",
    "text": "BIRD example queries\nquestion_id: 0\ndb_id: california_schools\nquestion: What is the highest eligible free rate for K-12 students in the schools in Alameda County?\nevidence: Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`\nSQL: SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1\ndifficulty: simple"
  },
  {
    "objectID": "buffer.html#initial-approach",
    "href": "buffer.html#initial-approach",
    "title": "Current OSS tooling",
    "section": "Initial approach",
    "text": "Initial approach\n\n\n\n\n\n\n\n\n\n\nuser\n\nuser\n\n\n\nQuestion\n\nQuestion\n\n\n\nuser-&gt;Question\n\n\n\n\n\nLLM\n\nLLM\n\n\n\nQuestion-&gt;LLM\n\n\nUser input\n\n\n\nextract\n\nSQL Extraction\n\n\n\nLLM-&gt;extract\n\n\nFind braced sql ```\n\n\n\nexecute\n\nExecution\n\n\n\nextract-&gt;execute\n\n\n\n\n\n\n\n\n\n\n\n\n🔥\n\n\n\n\n\n\nChat example\n\n\nMove this to a more appropriate place. - 🏛️ Providing the DB structure helps a lot to reduce hallucinations - 🧑🏽‍🏫 Adding examples of queries with their description usually also improved performance\n\n\n\nCan we pass all the DDL in the prompt with the user question?\nCan we entice the LLM to select the most appropriate pares of that DDL?\n\n➡️ RAG over tables, columns and values"
  },
  {
    "objectID": "buffer.html#schema-linking",
    "href": "buffer.html#schema-linking",
    "title": "Current OSS tooling",
    "section": "Schema linking",
    "text": "Schema linking\nSL is an common improvement over in text to SQL generation to improve accuracy and reduce hallucinations. It consists on mapping natural language words to tables, views, columns and values.\n. . .\nWe can do it with a different approaches, FTS, Vector Databases, etc.\n\n\nSchema Liking Techniques\n\n\nPrompt engineering\n\nProviding CREATE TABLE customers (name varchar...)\n\nRetrieval Augmented Generation RAG\nAgentic approaches, function calling\n\ngive_me_tables(user_input)\n\nFine tuned models\n\nProvide SQL examples and their meaning\n\n\n\n\n\n\nSL with RAG\nTBD"
  },
  {
    "objectID": "buffer.html#fixing-errors",
    "href": "buffer.html#fixing-errors",
    "title": "Current OSS tooling",
    "section": "Fixing errors",
    "text": "Fixing errors\nThe LLM in use may generate invalid SQL:\n\n\n tables or columns that don’t exist\ndialect functions that don’t exist\n\nTBD time functions"
  },
  {
    "objectID": "slides.html#about-myself",
    "href": "slides.html#about-myself",
    "title": "💬  🤖 Asking questions to your database with LLMs",
    "section": "About myself",
    "text": "About myself\n\n\n\n\n\n🐍 Pythonista with 18 years of experience.\n\nCo-organized SciPy Latin America\n\n🚜 Worked as CTO in Hello Tractor\n🧪 Software Engineer at IBM Research\n🛰️ Worked in Foundational Models for Geospatial applications\n\nThere’s a workshop on Saturday 🤩\n\n💬 Currently working on Flowpilot , providing core features to different products and divisions."
  },
  {
    "objectID": "slides.html#follow-along-or-at",
    "href": "slides.html#follow-along-or-at",
    "title": "💬  🤖 Asking questions to your database with LLMs",
    "section": "Follow along (or at 🏡)",
    "text": "Follow along (or at 🏡)"
  },
  {
    "objectID": "slides.html#public-datasets-used-in-text-to-sql",
    "href": "slides.html#public-datasets-used-in-text-to-sql",
    "title": "💬  🤖 Asking questions to your database with LLMs",
    "section": "Public datasets used in text to SQL",
    "text": "Public datasets used in text to SQL\n\n\n\n\n\n\n\n🕷️ Spider\n\n\n\n\n🕷️ 🕷️ Spider 2\n\n\n\n\n🐦 BIRD\n\n\n\n\n🏹 Archer\n\n\n\n\nThese datasets define:\n\n❓ Natural language questions\n🫰 Expected SQL\n🏗️ Database schema & content\n🔎 Evaluation metrics\n🥇 Leaderboard"
  },
  {
    "objectID": "slides.html#bird",
    "href": "slides.html#bird",
    "title": "💬  🤖 Asking questions to your database with LLMs",
    "section": "BIRD",
    "text": "BIRD\n\n\n\nIBM Research in the lederboard 2024-06-02\n\n\n\nWe’re select BIRD dataset since we have some experience with it, we managed to get to the top of the leatherboard in 2024/6"
  },
  {
    "objectID": "slides.html#prompts-for-sql-generation",
    "href": "slides.html#prompts-for-sql-generation",
    "title": "💬  🤖 Asking questions to your database with LLMs",
    "section": "Prompts for SQL generation",
    "text": "Prompts for SQL generation\n\nLLMs don’t know the 🏗️ structure of our database, and may hallucinate about it, or create some flat out invalid SQL.\n\n\nWe have to provide extra information about the structure in the instructions.\nFor this we will use a prompt string with some palace-holders .\n\n\nSome research papers from our team from our team:\n Weakly Supervised Detection of Hallucinations in LLMs\n\n\n Localizing Persona Representations In LLMs\n\n\nIn Flowpilot we created a framework inspired on LangGraph for this."
  },
  {
    "objectID": "slides.html#creating-a-prompt",
    "href": "slides.html#creating-a-prompt",
    "title": "💬  🤖 Asking questions to your database with LLMs",
    "section": "Creating a prompt",
    "text": "Creating a prompt\nNow we construct a list of messages. These are dicts which have a key user or system, and a content.\n\ndef generate_messages(question, dialect=\"SQL\", top_k=5, table_info=\"\"):\n    # Create a ChatPromptTemplate\n    messages = [\n      {\"role\": \"system\", \n      \"content\": system_message.format(\n        dialect=dialect, \n        top_k=top_k, \n        table_info=table_info\n       )},\n      {\n        \"role\": \"user\", \n        \"content\": question\n      }\n    ]\n    \n    return messages\n\nmessages = generate_messages(question=question, dialect=db.dialect, top_k=10, table_info=db.get_table_info())\nprint(messages)"
  },
  {
    "objectID": "slides.html#creating-a-prompt-output",
    "href": "slides.html#creating-a-prompt-output",
    "title": "💬  🤖 Asking questions to your database with LLMs",
    "section": "Creating a prompt",
    "text": "Creating a prompt\n\n[\n    {\n        'role': 'system',\n        'content': '\\nGiven an input question, create a syntactically \ncorrect sqlite query to\\nrun to help find the answer. Unless the user \nspecifies in his question a\\nspecific number of examples they wish to \nobtain, always limit your query to\\nat most 10 results. You can order the \nresults by a relevant column to\\nreturn the most interesting examples in \nthe database.\\n\\nNever query for all the columns from a specific table, \nonly ask for a the\\nfew relevant columns given the question.\\n\\nPay \nattention to use only the column names that you can see in the \nschema\\ndescription. Be careful to not query for columns that do not exist.\nAlso,\\npay attention to which column is in which table.\\n\\nOnly use the \nfollowing tables:\\n\\nCREATE TABLE frpm (\\n\\t\"CDSCode\" TEXT NOT NULL, \n\\n\\t\"Academic Year\" TEXT, \\n\\t\"County Code\" TEXT, \\n\\t\"District Code\" \nINTEGER, \\n\\t\"School Code\" TEXT, \\n\\t\"County Name\" TEXT, \\n\\t\"District \nName\" TEXT, \\n\\t\"School Name\" TEXT, \\n\\t\"District Type\" TEXT, \\n\\t\"School \nType\" TEXT, \\n\\t\"Educational Option Type\" TEXT, \\n\\t\"NSLP Provision Status\"\nTEXT, \\n\\t\"Charter School (Y/N)\" INTEGER, \\n\\t\"Charter School Number\" TEXT,\n\\n\\t\"Charter Funding Type\" TEXT, \\n\\t\"IRC\" INTEGER, \\n\\t\"Low Grade\" TEXT, \n\\n\\t\"High Grade\" TEXT, \\n\\t\"Enrollment (K-12)\" REAL, \\n\\t\"Free Meal Count \n(K-12)\" REAL, \\n\\t\"Percent (%) Eligible Free (K-12)\" REAL, \\n\\t\"FRPM Count \n(K-12)\" REAL, \\n\\t\"Percent (%) Eligible FRPM (K-12)\" REAL, \\n\\t\"Enrollment \n(Ages 5-17)\" REAL, \\n\\t\"Free Meal Count (Ages 5-17)\" REAL, \\n\\t\"Percent (%)\nEligible Free (Ages 5-17)\" REAL, \\n\\t\"FRPM Count (Ages 5-17)\" REAL, \n\\n\\t\"Percent (%) Eligible FRPM (Ages 5-17)\" REAL, \\n\\t\"2013-14 CALPADS Fall\n1 Certification Status\" INTEGER, \\n\\tPRIMARY KEY (\"CDSCode\"), \\n\\tFOREIGN \nKEY(\"CDSCode\") REFERENCES schools (\"CDSCode\")\\n)\\n\\n/*\\n3 rows from frpm \ntable:\\nCDSCode\\tAcademic Year\\tCounty Code\\tDistrict Code\\tSchool \nCode\\tCounty Name\\tDistrict Name\\tSchool Name\\tDistrict Type\\tSchool \nType\\tEducational Option Type\\tNSLP Provision Status\\tCharter School \n(Y/N)\\tCharter School Number\\tCharter Funding Type\\tIRC\\tLow Grade\\tHigh \nGrade\\tEnrollment (K-12)\\tFree Meal Count (K-12)\\tPercent (%) Eligible Free\n(K-12)\\tFRPM Count (K-12)\\tPercent (%) Eligible FRPM (K-12)\\tEnrollment \n(Ages 5-17)\\tFree Meal Count (Ages 5-17)\\tPercent (%) Eligible Free (Ages \n5-17)\\tFRPM Count (Ages 5-17)\\tPercent (%) Eligible FRPM (Ages \n5-17)\\t2013-14 CALPADS Fall 1 Certification \nStatus\\n01100170109835\\t2014-2015\\t01\\t10017\\t0109835\\tAlameda\\tAlameda \nCounty Office of Education\\tFAME Public Charter\\tCounty Office of Education\n(COE)\\tK-12 Schools (Public)\\tTraditional\\tNone\\t1\\t0728\\tDirectly \nfunded\\t1\\tK\\t12\\t1087.0\\t565.0\\t0.519779208831647\\t715.0\\t0.65777368905243\n8\\t1070.0\\t553.0\\t0.516822429906542\\t702.0\\t0.65607476635514\\t1\\n0110017011\n2607\\t2014-2015\\t01\\t10017\\t0112607\\tAlameda\\tAlameda County Office of \nEducation\\tEnvision Academy for Arts & Technology\\tCounty Office of \nEducation (COE)\\tHigh Schools \n(Public)\\tTraditional\\tNone\\t1\\t0811\\tDirectly \nfunded\\t1\\t9\\t12\\t395.0\\t186.0\\t0.470886075949367\\t186.0\\t0.470886075949367\n\\t376.0\\t182.0\\t0.484042553191489\\t182.0\\t0.484042553191489\\t1\\n01100170118\n489\\t2014-2015\\t01\\t10017\\t0118489\\tAlameda\\tAlameda County Office of \nEducation\\tAspire California College Preparatory Academy\\tCounty Office of \nEducation (COE)\\tHigh Schools \n(Public)\\tTraditional\\tNone\\t1\\t1049\\tDirectly \nfunded\\t1\\t9\\t12\\t244.0\\t134.0\\t0.549180327868853\\t175.0\\t0.717213114754098\n\\t230.0\\t128.0\\t0.556521739130435\\t168.0\\t0.730434782608696\\t1\\n*/\\n\\n\\nCRE\nATE TABLE satscores (\\n\\tcds TEXT NOT NULL, \\n\\trtype TEXT NOT NULL, \n\\n\\tsname TEXT, \\n\\tdname TEXT, \\n\\tcname TEXT, \\n\\tenroll12 INTEGER NOT \nNULL, \\n\\t\"NumTstTakr\" INTEGER NOT NULL, \\n\\t\"AvgScrRead\" INTEGER, \n\\n\\t\"AvgScrMath\" INTEGER, \\n\\t\"AvgScrWrite\" INTEGER, \\n\\t\"NumGE1500\" \nINTEGER, \\n\\tPRIMARY KEY (cds), \\n\\tFOREIGN KEY(cds) REFERENCES schools \n(\"CDSCode\")\\n)\\n\\n/*\\n3 rows from satscores \ntable:\\ncds\\trtype\\tsname\\tdname\\tcname\\tenroll12\\tNumTstTakr\\tAvgScrRead\\t\nAvgScrMath\\tAvgScrWrite\\tNumGE1500\\n01100170000000\\tD\\tNone\\tAlameda County\nOffice of \nEducation\\tAlameda\\t398\\t88\\t418\\t418\\t417\\t14\\n01100170109835\\tS\\tFAME \nPublic Charter\\tAlameda County Office of \nEducation\\tAlameda\\t62\\t17\\t503\\t546\\t505\\t9\\n01100170112607\\tS\\tEnvision \nAcademy for Arts & Technology\\tAlameda County Office of \nEducation\\tAlameda\\t75\\t71\\t397\\t387\\t395\\t5\\n*/\\n\\n\\nCREATE TABLE schools \n(\\n\\t\"CDSCode\" TEXT NOT NULL, \\n\\t\"NCESDist\" TEXT, \\n\\t\"NCESSchool\" TEXT, \n\\n\\t\"StatusType\" TEXT NOT NULL, \\n\\t\"County\" TEXT NOT NULL, \\n\\t\"District\" \nTEXT NOT NULL, \\n\\t\"School\" TEXT, \\n\\t\"Street\" TEXT, \\n\\t\"StreetAbr\" TEXT, \n\\n\\t\"City\" TEXT, \\n\\t\"Zip\" TEXT, \\n\\t\"State\" TEXT, \\n\\t\"MailStreet\" TEXT, \n\\n\\t\"MailStrAbr\" TEXT, \\n\\t\"MailCity\" TEXT, \\n\\t\"MailZip\" TEXT, \n\\n\\t\"MailState\" TEXT, \\n\\t\"Phone\" TEXT, \\n\\t\"Ext\" TEXT, \\n\\t\"Website\" TEXT,\n\\n\\t\"OpenDate\" DATE, \\n\\t\"ClosedDate\" DATE, \\n\\t\"Charter\" INTEGER, \n\\n\\t\"CharterNum\" TEXT, \\n\\t\"FundingType\" TEXT, \\n\\t\"DOC\" TEXT NOT NULL, \n\\n\\t\"DOCType\" TEXT NOT NULL, \\n\\t\"SOC\" TEXT, \\n\\t\"SOCType\" TEXT, \n\\n\\t\"EdOpsCode\" TEXT, \\n\\t\"EdOpsName\" TEXT, \\n\\t\"EILCode\" TEXT, \n\\n\\t\"EILName\" TEXT, \\n\\t\"GSoffered\" TEXT, \\n\\t\"GSserved\" TEXT, \n\\n\\t\"Virtual\" TEXT, \\n\\t\"Magnet\" INTEGER, \\n\\t\"Latitude\" REAL, \n\\n\\t\"Longitude\" REAL, \\n\\t\"AdmFName1\" TEXT, \\n\\t\"AdmLName1\" TEXT, \n\\n\\t\"AdmEmail1\" TEXT, \\n\\t\"AdmFName2\" TEXT, \\n\\t\"AdmLName2\" TEXT, \n\\n\\t\"AdmEmail2\" TEXT, \\n\\t\"AdmFName3\" TEXT, \\n\\t\"AdmLName3\" TEXT, \n\\n\\t\"AdmEmail3\" TEXT, \\n\\t\"LastUpdate\" DATE NOT NULL, \\n\\tPRIMARY KEY \n(\"CDSCode\")\\n)\\n\\n/*\\n3 rows from schools \ntable:\\nCDSCode\\tNCESDist\\tNCESSchool\\tStatusType\\tCounty\\tDistrict\\tSchool\n\\tStreet\\tStreetAbr\\tCity\\tZip\\tState\\tMailStreet\\tMailStrAbr\\tMailCity\\tMa\nilZip\\tMailState\\tPhone\\tExt\\tWebsite\\tOpenDate\\tClosedDate\\tCharter\\tChart\nerNum\\tFundingType\\tDOC\\tDOCType\\tSOC\\tSOCType\\tEdOpsCode\\tEdOpsName\\tEILCo\nde\\tEILName\\tGSoffered\\tGSserved\\tVirtual\\tMagnet\\tLatitude\\tLongitude\\tAdm\nFName1\\tAdmLName1\\tAdmEmail1\\tAdmFName2\\tAdmLName2\\tAdmEmail2\\tAdmFName3\\tA\ndmLName3\\tAdmEmail3\\tLastUpdate\\n01100170000000\\t0691051\\tNone\\tActive\\tAla\nmeda\\tAlameda County Office of Education\\tNone\\t313 West Winton Avenue\\t313\nWest Winton Ave.\\tHayward\\t94544-1136\\tCA\\t313 West Winton Avenue\\t313 West\nWinton Ave.\\tHayward\\t94544-1136\\tCA\\t(510) \n887-0152\\tNone\\twww.acoe.org\\tNone\\tNone\\tNone\\tNone\\tNone\\t00\\tCounty \nOffice of Education \n(COE)\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\t37.65821\n2\\t-122.09713\\tL \nKaren\\tMonroe\\tlkmonroe@acoe.org\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\t2015-\n06-23\\n01100170109835\\t0691051\\t10546\\tClosed\\tAlameda\\tAlameda County \nOffice of Education\\tFAME Public Charter\\t39899 Balentine Drive, Suite \n335\\t39899 Balentine Dr., Ste. 335\\tNewark\\t94560-5359\\tCA\\t39899 Balentine\nDrive, Suite 335\\t39899 Balentine Dr., Ste. \n335\\tNewark\\t94560-5359\\tCA\\tNone\\tNone\\tNone\\t2005-08-29\\t2015-07-31\\t1\\t0\n728\\tDirectly funded\\t00\\tCounty Office of Education (COE)\\t65\\tK-12 \nSchools (Public)\\tTRAD\\tTraditional\\tELEMHIGH\\tElementary-High \nCombination\\tK-12\\tK-12\\tP\\t0\\t37.521436\\t-121.99391\\tNone\\tNone\\tNone\\tNon\ne\\tNone\\tNone\\tNone\\tNone\\tNone\\t2015-09-01\\n01100170112607\\t0691051\\t10947\n\\tActive\\tAlameda\\tAlameda County Office of Education\\tEnvision Academy for\nArts & Technology\\t1515 Webster Street\\t1515 Webster \nSt.\\tOakland\\t94612-3355\\tCA\\t1515 Webster Street\\t1515 Webster \nSt.\\tOakland\\t94612\\tCA\\t(510) \n596-8901\\tNone\\twww.envisionacademy.org/\\t2006-08-28\\tNone\\t1\\t0811\\tDirect\nly funded\\t00\\tCounty Office of Education (COE)\\t66\\tHigh Schools \n(Public)\\tTRAD\\tTraditional\\tHS\\tHigh \nSchool\\t9-12\\t9-12\\tN\\t0\\t37.80452\\t-122.26815\\tLaura\\tRobell\\tlaura@envisi\nonacademy.org\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\t2015-06-18\\n*/\\n'\n    },\n    {\n        'role': 'user',\n        'content': 'How many schools with an average score in Math greater \nthan 400 in the SAT test are exclusively virtual?'\n    }\n]"
  },
  {
    "objectID": "slides.html#structured-output",
    "href": "slides.html#structured-output",
    "title": "💬  🤖 Asking questions to your database with LLMs",
    "section": "Structured output",
    "text": "Structured output\n\nNow that we get the SQL, we’re going to ask the LLM to return the response as JSON using a Pydantic model.\n\n\n\nfrom pydantic import BaseModel, Field\nclass SQLOutput(BaseModel):\n    sql: str = Field(description=\"The SQL query\")\n    explanation: str = Field(description=\"The reasoning for the query construction\")\n\n# Optional \n# litellm.enable_json_schema_validation = True\n\nresponse = litellm.completion(\n  model=model,\n  messages=messages,\n  response_format=SQLOutput,\n)\noutput = SQLOutput.model_validate_json(response.choices[0].message.content)\nprint(output)"
  },
  {
    "objectID": "slides.html#structured-output-output",
    "href": "slides.html#structured-output-output",
    "title": "💬  🤖 Asking questions to your database with LLMs",
    "section": "Structured output",
    "text": "Structured output\n\nSQLOutput(\n    sql=\"SELECT COUNT(*) FROM schools INNER JOIN satscores ON \nschools.CDSCode = satscores.cds WHERE schools.Virtual = 'Y' AND \nsatscores.AvgScrMath &gt; 400;\",\n    explanation=\"The query selects the count of virtual schools from the \n'schools' table that have a 'Virtual' column value of 'Y' and an \n'AvgScrMath' (average score in Math) in the 'satscores' table greater than \n400. It uses a JOIN to combine data from both tables based on the common \n'CDSCode' column.\"\n)"
  },
  {
    "objectID": "slides.html#state-for-sql-workflow",
    "href": "slides.html#state-for-sql-workflow",
    "title": "💬  🤖 Asking questions to your database with LLMs",
    "section": "State for SQL workflow",
    "text": "State for SQL workflow\nLangGraph uses state that is propagated through nodes.\nThis state can be defined with a TypedDict or a Pydantic BaseModel.\n\nfrom typing import Optional, Dict, List\nfrom dataclasses import dataclass, field\nfrom sqlalchemy import Engine\n\n@dataclass\nclass State:\n    question: str = \"\"\n    engine: Optional[Engine] = None\n    database: Optional[SQLDatabase] = None\n    messages: List[Dict[str, str]] = field(default_factory=list)\n    sql: Optional[str] = None\n    results: Optional[str] = None"
  },
  {
    "objectID": "slides.html#creating-nodes",
    "href": "slides.html#creating-nodes",
    "title": "💬  🤖 Asking questions to your database with LLMs",
    "section": "Creating Nodes",
    "text": "Creating Nodes\nThe initial node will receive the user input and create the state.\n\ndef init(user_input: Dict[str, str]) -&gt; State:\n  engine = create_engine(user_input[\"database\"])\n  database = SQLDatabase(engine=engine)\n  return State(\n    question=user_input[\"question\"], \n    database=database,\n  )"
  },
  {
    "objectID": "slides.html#generating-the-prompt",
    "href": "slides.html#generating-the-prompt",
    "title": "💬  🤖 Asking questions to your database with LLMs",
    "section": "Generating the prompt",
    "text": "Generating the prompt\n\ndef make_prompt(state: State) -&gt; State:\n    messages = [\n      {\n        \"role\": \"system\", \n        \"content\": system_message.format(\n          dialect=state.database.dialect, \n          top_k=top_k,\n          table_info=state.database.get_table_info()\n        )},\n      {\n        \"role\": \"user\", \n        \"content\": state.question,\n      }\n    ]\n    return state"
  },
  {
    "objectID": "slides.html#calling-the-llm",
    "href": "slides.html#calling-the-llm",
    "title": "💬  🤖 Asking questions to your database with LLMs",
    "section": "Calling the LLM",
    "text": "Calling the LLM\nThe initial node will receive the user input and create the state.\n\ndef generate(state: State) -&gt; State:\n\n  response = litellm.completion(\n    model=model,\n    messages=messages,\n    response_format=SQLOutput,\n  )\n  output = SQLOutput.model_validate_json(response.choices[0].message.content)\n  print(output)\n  engine = create_engine(user_input[\"database\"])\n  database = SQLDatabase(engine=engine)\n  return State(\n    question=user_input[\"question\"], \n    database=database,\n  )"
  },
  {
    "objectID": "slides.html#graph-creation",
    "href": "slides.html#graph-creation",
    "title": "💬  🤖 Asking questions to your database with LLMs",
    "section": "Graph creation",
    "text": "Graph creation\n#| echo: true\n#| code-line-numbers: \"1\"\n#| output-location: slide\nfrom langgraph.graph import StateGraph, START, END\n\ngraph_builder = StateGraph(State)\ngraph_builder.add_node(\"init\", init)\ngraph_builder.add_node(\"make_prompt\", make_prompt)\ngraph_builder.add_node(\"generate\", generate)\ngraph_builder.add_node(\"execute\", execute)\ngraph_builder.add_edge(START, \"init\")\ngraph_builder.add_edge(\"init\", \"make_prompt\")\ngraph_builder.add_edge(\"lambda_2\", END)\ndisplay(graph_builder.compile())"
  },
  {
    "objectID": "slides.html#adding-a-node-for-safety",
    "href": "slides.html#adding-a-node-for-safety",
    "title": "💬  🤖 Asking questions to your database with LLMs",
    "section": "Adding a node for safety",
    "text": "Adding a node for safety\n\nUsually done through LLMs in agentic workflows, we are going to take a more deterministic approach."
  },
  {
    "objectID": "slides.html#lets-go-for-bobby-tables",
    "href": "slides.html#lets-go-for-bobby-tables",
    "title": "💬  🤖 Asking questions to your database with LLMs",
    "section": "Let’s go for Bobby tables",
    "text": "Let’s go for Bobby tables\n\n\nxkcd 327"
  },
  {
    "objectID": "slides.html#acronyms",
    "href": "slides.html#acronyms",
    "title": "💬  🤖 Asking questions to your database with LLMs",
    "section": "Acronyms",
    "text": "Acronyms"
  },
  {
    "objectID": "slides.html#move-from-function-to-classes",
    "href": "slides.html#move-from-function-to-classes",
    "title": "💬  🤖 Asking questions to your database with LLMs",
    "section": "Move from function to classes",
    "text": "Move from function to classes\n\n\n\nThe workflow state can be a dict or TypedDict, but dataclass or a BaseModel is more convenient.\n\nclass State(TypedDict):\n  connection: ...\n  messages: ...\n  schema: ...\n\n\n\n\n\n\nA simple function that works with the state.\n\ndef create_sql(state: State) -&gt; State:\n  # Do something\n  return State(...)\n\n\n\n\n\n\nThis can also be a class if we want to pass more information.\n\nclass CreateSQLNode:\n  def __init__(self, config: ...) -&gt; None:\n    self.config = config\n  \n  def __call__(\n    self, state: State\n  ) -&gt; State:\n    # do something\n    return State(...)"
  },
  {
    "objectID": "slides.html#reducing-the-schema-for-simpler-queries",
    "href": "slides.html#reducing-the-schema-for-simpler-queries",
    "title": "💬  🤖 Asking questions to your database with LLMs",
    "section": "Reducing the schema for simpler queries",
    "text": "Reducing the schema for simpler queries\nTBD"
  },
  {
    "objectID": "slides.html#metadata-about-the-columns",
    "href": "slides.html#metadata-about-the-columns",
    "title": "💬  🤖 Asking questions to your database with LLMs",
    "section": "Metadata about the columns",
    "text": "Metadata about the columns\nTBD reducing the involved columns"
  },
  {
    "objectID": "slides.html#dynamic-context",
    "href": "slides.html#dynamic-context",
    "title": "💬  🤖 Asking questions to your database with LLMs",
    "section": "Dynamic context",
    "text": "Dynamic context\n\nDate related acronyms, like Q1, Q2, etc.\nFunction nodes\n\nWASM?"
  }
]