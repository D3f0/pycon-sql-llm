[
  {
    "objectID": "slides.html#about-myself",
    "href": "slides.html#about-myself",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "About myself",
    "text": "About myself\n\n\n\n\n\nüêç Pythonista with 18 years of experience üá¶üá∑ üßâ\n\nCo-organized SciPy Latin America\nPyCon Argentina and EuroPython speaker\n\nüöú Worked as CTO in Hello Tractor\nüß™ Software Engineer at IBM Research\nüõ∞Ô∏è Worked in Foundational Models for Geospatial applications \nüí¨ Currently working on Flowpilot , providing core features to different products and divisions"
  },
  {
    "objectID": "slides.html#tomorrow",
    "href": "slides.html#tomorrow",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Tomorrow",
    "text": "Tomorrow\n\n\n\n\n\n\n\n\nLearn about Multimodal Geospatial Foundation Models with Terratorch by Wanjiru, Beldine and Reggie"
  },
  {
    "objectID": "slides.html#follow-along-or-at",
    "href": "slides.html#follow-along-or-at",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Follow along (or at üè°)",
    "text": "Follow along (or at üè°)\n\n\n\n\n\n\n    \n\nGet the slides \n\n\n\nGet the code \n https://github.com/D3f0/pycon-sql-llm"
  },
  {
    "objectID": "slides.html#pipeline-overview",
    "href": "slides.html#pipeline-overview",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Pipeline Overview",
    "text": "Pipeline Overview"
  },
  {
    "objectID": "slides.html#bird",
    "href": "slides.html#bird",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "BIRD",
    "text": "BIRD\n\n\n\nIBM Research in the leaderboard last year\n\n\n\nWe‚Äôre select BIRD dataset since we have some experience with it, we managed to get to the top of the leatherboard in 2024/6"
  },
  {
    "objectID": "slides.html#er-of-california_schools",
    "href": "slides.html#er-of-california_schools",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "ER of california_schools ",
    "text": "ER of california_schools"
  },
  {
    "objectID": "slides.html#prompts-for-sql-generation",
    "href": "slides.html#prompts-for-sql-generation",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Prompts for SQL generation",
    "text": "Prompts for SQL generation\n\nLLMs don‚Äôt know the üèóÔ∏è structure of our database, and may hallucinate about it, or create some flat out invalid SQL\n\n\nWe have to provide extra information about the structure in the instructions\nFor this we will use a prompt string with some placeholders .\n\n\nSome research papers from our team on Robust LLMs:\n Weakly Supervised Detection of Hallucinations in LLMs\n\n\n Localizing Persona Representations In LLMs\n\n\nNow we‚Äôre gonna see what we‚Äôre put in the prompt, for starters the schema"
  },
  {
    "objectID": "slides.html#the-messages-that-constitute-the-prompt",
    "href": "slides.html#the-messages-that-constitute-the-prompt",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "The messages that constitute the prompt",
    "text": "The messages that constitute the prompt\nNow we construct a list of messages. These are dicts which have a key user or system, and a content.\n\ndef generate_messages(question, dialect=\"SQL\", top_k=5, table_info=\"\"):\n    # Create a ChatPromptTemplate\n    messages = [\n      {\n        \"role\": \"system\", \n        \"content\": system_message.format(\n          dialect=dialect, \n          top_k=top_k, \n          table_info=table_info\n        )},\n      {\n        \"role\": \"user\", \n        \"content\": question\n      }\n    ]\n    \n    return messages\n\nmessages = generate_messages(\n  question=question, \n  dialect=db.dialect, top_k=10, \n  table_info=db.get_table_info())\nmessages"
  },
  {
    "objectID": "slides.html#the-messages-that-constitute-the-prompt-output",
    "href": "slides.html#the-messages-that-constitute-the-prompt-output",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "The messages that constitute the prompt",
    "text": "The messages that constitute the prompt\n\n[{'role': 'system',\n  'content': '\\nGiven an input question, create a syntactically correct sqlite query to\\nrun to help find the answer. Unless the user specifies in his question a\\nspecific number of examples they wish to obtain, always limit your query to\\nat most 10 results. You can order the results by a relevant column to\\nreturn the most interesting examples in the database.\\n\\nNever query for all the columns from a specific table, only ask for a the\\nfew relevant columns given the question.\\n\\nPay attention to use only the column names that you can see in the schema\\ndescription. Be careful to not query for columns that do not exist. Also,\\npay attention to which column is in which table.\\n\\nOnly use the following tables:\\n\\nCREATE TABLE frpm (\\n\\t\"CDSCode\" TEXT NOT NULL, \\n\\t\"Academic Year\" TEXT, \\n\\t\"County Code\" TEXT, \\n\\t\"District Code\" INTEGER, \\n\\t\"School Code\" TEXT, \\n\\t\"County Name\" TEXT, \\n\\t\"District Name\" TEXT, \\n\\t\"School Name\" TEXT, \\n\\t\"District Type\" TEXT, \\n\\t\"School Type\" TEXT, \\n\\t\"Educational Option Type\" TEXT, \\n\\t\"NSLP Provision Status\" TEXT, \\n\\t\"Charter School (Y/N)\" INTEGER, \\n\\t\"Charter School Number\" TEXT, \\n\\t\"Charter Funding Type\" TEXT, \\n\\t\"IRC\" INTEGER, \\n\\t\"Low Grade\" TEXT, \\n\\t\"High Grade\" TEXT, \\n\\t\"Enrollment (K-12)\" REAL, \\n\\t\"Free Meal Count (K-12)\" REAL, \\n\\t\"Percent (%) Eligible Free (K-12)\" REAL, \\n\\t\"FRPM Count (K-12)\" REAL, \\n\\t\"Percent (%) Eligible FRPM (K-12)\" REAL, \\n\\t\"Enrollment (Ages 5-17)\" REAL, \\n\\t\"Free Meal Count (Ages 5-17)\" REAL, \\n\\t\"Percent (%) Eligible Free (Ages 5-17)\" REAL, \\n\\t\"FRPM Count (Ages 5-17)\" REAL, \\n\\t\"Percent (%) Eligible FRPM (Ages 5-17)\" REAL, \\n\\t\"2013-14 CALPADS Fall 1 Certification Status\" INTEGER, \\n\\tPRIMARY KEY (\"CDSCode\"), \\n\\tFOREIGN KEY(\"CDSCode\") REFERENCES schools (\"CDSCode\")\\n)\\n\\n/*\\n3 rows from frpm table:\\nCDSCode\\tAcademic Year\\tCounty Code\\tDistrict Code\\tSchool Code\\tCounty Name\\tDistrict Name\\tSchool Name\\tDistrict Type\\tSchool Type\\tEducational Option Type\\tNSLP Provision Status\\tCharter School (Y/N)\\tCharter School Number\\tCharter Funding Type\\tIRC\\tLow Grade\\tHigh Grade\\tEnrollment (K-12)\\tFree Meal Count (K-12)\\tPercent (%) Eligible Free (K-12)\\tFRPM Count (K-12)\\tPercent (%) Eligible FRPM (K-12)\\tEnrollment (Ages 5-17)\\tFree Meal Count (Ages 5-17)\\tPercent (%) Eligible Free (Ages 5-17)\\tFRPM Count (Ages 5-17)\\tPercent (%) Eligible FRPM (Ages 5-17)\\t2013-14 CALPADS Fall 1 Certification Status\\n01100170109835\\t2014-2015\\t01\\t10017\\t0109835\\tAlameda\\tAlameda County Office of Education\\tFAME Public Charter\\tCounty Office of Education (COE)\\tK-12 Schools (Public)\\tTraditional\\tNone\\t1\\t0728\\tDirectly funded\\t1\\tK\\t12\\t1087.0\\t565.0\\t0.519779208831647\\t715.0\\t0.657773689052438\\t1070.0\\t553.0\\t0.516822429906542\\t702.0\\t0.65607476635514\\t1\\n01100170112607\\t2014-2015\\t01\\t10017\\t0112607\\tAlameda\\tAlameda County Office of Education\\tEnvision Academy for Arts & Technology\\tCounty Office of Education (COE)\\tHigh Schools (Public)\\tTraditional\\tNone\\t1\\t0811\\tDirectly funded\\t1\\t9\\t12\\t395.0\\t186.0\\t0.470886075949367\\t186.0\\t0.470886075949367\\t376.0\\t182.0\\t0.484042553191489\\t182.0\\t0.484042553191489\\t1\\n01100170118489\\t2014-2015\\t01\\t10017\\t0118489\\tAlameda\\tAlameda County Office of Education\\tAspire California College Preparatory Academy\\tCounty Office of Education (COE)\\tHigh Schools (Public)\\tTraditional\\tNone\\t1\\t1049\\tDirectly funded\\t1\\t9\\t12\\t244.0\\t134.0\\t0.549180327868853\\t175.0\\t0.717213114754098\\t230.0\\t128.0\\t0.556521739130435\\t168.0\\t0.730434782608696\\t1\\n*/\\n\\n\\nCREATE TABLE satscores (\\n\\tcds TEXT NOT NULL, \\n\\trtype TEXT NOT NULL, \\n\\tsname TEXT, \\n\\tdname TEXT, \\n\\tcname TEXT, \\n\\tenroll12 INTEGER NOT NULL, \\n\\t\"NumTstTakr\" INTEGER NOT NULL, \\n\\t\"AvgScrRead\" INTEGER, \\n\\t\"AvgScrMath\" INTEGER, \\n\\t\"AvgScrWrite\" INTEGER, \\n\\t\"NumGE1500\" INTEGER, \\n\\tPRIMARY KEY (cds), \\n\\tFOREIGN KEY(cds) REFERENCES schools (\"CDSCode\")\\n)\\n\\n/*\\n3 rows from satscores table:\\ncds\\trtype\\tsname\\tdname\\tcname\\tenroll12\\tNumTstTakr\\tAvgScrRead\\tAvgScrMath\\tAvgScrWrite\\tNumGE1500\\n01100170000000\\tD\\tNone\\tAlameda County Office of Education\\tAlameda\\t398\\t88\\t418\\t418\\t417\\t14\\n01100170109835\\tS\\tFAME Public Charter\\tAlameda County Office of Education\\tAlameda\\t62\\t17\\t503\\t546\\t505\\t9\\n01100170112607\\tS\\tEnvision Academy for Arts & Technology\\tAlameda County Office of Education\\tAlameda\\t75\\t71\\t397\\t387\\t395\\t5\\n*/\\n\\n\\nCREATE TABLE schools (\\n\\t\"CDSCode\" TEXT NOT NULL, \\n\\t\"NCESDist\" TEXT, \\n\\t\"NCESSchool\" TEXT, \\n\\t\"StatusType\" TEXT NOT NULL, \\n\\t\"County\" TEXT NOT NULL, \\n\\t\"District\" TEXT NOT NULL, \\n\\t\"School\" TEXT, \\n\\t\"Street\" TEXT, \\n\\t\"StreetAbr\" TEXT, \\n\\t\"City\" TEXT, \\n\\t\"Zip\" TEXT, \\n\\t\"State\" TEXT, \\n\\t\"MailStreet\" TEXT, \\n\\t\"MailStrAbr\" TEXT, \\n\\t\"MailCity\" TEXT, \\n\\t\"MailZip\" TEXT, \\n\\t\"MailState\" TEXT, \\n\\t\"Phone\" TEXT, \\n\\t\"Ext\" TEXT, \\n\\t\"Website\" TEXT, \\n\\t\"OpenDate\" DATE, \\n\\t\"ClosedDate\" DATE, \\n\\t\"Charter\" INTEGER, \\n\\t\"CharterNum\" TEXT, \\n\\t\"FundingType\" TEXT, \\n\\t\"DOC\" TEXT NOT NULL, \\n\\t\"DOCType\" TEXT NOT NULL, \\n\\t\"SOC\" TEXT, \\n\\t\"SOCType\" TEXT, \\n\\t\"EdOpsCode\" TEXT, \\n\\t\"EdOpsName\" TEXT, \\n\\t\"EILCode\" TEXT, \\n\\t\"EILName\" TEXT, \\n\\t\"GSoffered\" TEXT, \\n\\t\"GSserved\" TEXT, \\n\\t\"Virtual\" TEXT, \\n\\t\"Magnet\" INTEGER, \\n\\t\"Latitude\" REAL, \\n\\t\"Longitude\" REAL, \\n\\t\"AdmFName1\" TEXT, \\n\\t\"AdmLName1\" TEXT, \\n\\t\"AdmEmail1\" TEXT, \\n\\t\"AdmFName2\" TEXT, \\n\\t\"AdmLName2\" TEXT, \\n\\t\"AdmEmail2\" TEXT, \\n\\t\"AdmFName3\" TEXT, \\n\\t\"AdmLName3\" TEXT, \\n\\t\"AdmEmail3\" TEXT, \\n\\t\"LastUpdate\" DATE NOT NULL, \\n\\tPRIMARY KEY (\"CDSCode\")\\n)\\n\\n/*\\n3 rows from schools table:\\nCDSCode\\tNCESDist\\tNCESSchool\\tStatusType\\tCounty\\tDistrict\\tSchool\\tStreet\\tStreetAbr\\tCity\\tZip\\tState\\tMailStreet\\tMailStrAbr\\tMailCity\\tMailZip\\tMailState\\tPhone\\tExt\\tWebsite\\tOpenDate\\tClosedDate\\tCharter\\tCharterNum\\tFundingType\\tDOC\\tDOCType\\tSOC\\tSOCType\\tEdOpsCode\\tEdOpsName\\tEILCode\\tEILName\\tGSoffered\\tGSserved\\tVirtual\\tMagnet\\tLatitude\\tLongitude\\tAdmFName1\\tAdmLName1\\tAdmEmail1\\tAdmFName2\\tAdmLName2\\tAdmEmail2\\tAdmFName3\\tAdmLName3\\tAdmEmail3\\tLastUpdate\\n01100170000000\\t0691051\\tNone\\tActive\\tAlameda\\tAlameda County Office of Education\\tNone\\t313 West Winton Avenue\\t313 West Winton Ave.\\tHayward\\t94544-1136\\tCA\\t313 West Winton Avenue\\t313 West Winton Ave.\\tHayward\\t94544-1136\\tCA\\t(510) 887-0152\\tNone\\twww.acoe.org\\tNone\\tNone\\tNone\\tNone\\tNone\\t00\\tCounty Office of Education (COE)\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\t37.658212\\t-122.09713\\tL Karen\\tMonroe\\tlkmonroe@acoe.org\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\t2015-06-23\\n01100170109835\\t0691051\\t10546\\tClosed\\tAlameda\\tAlameda County Office of Education\\tFAME Public Charter\\t39899 Balentine Drive, Suite 335\\t39899 Balentine Dr., Ste. 335\\tNewark\\t94560-5359\\tCA\\t39899 Balentine Drive, Suite 335\\t39899 Balentine Dr., Ste. 335\\tNewark\\t94560-5359\\tCA\\tNone\\tNone\\tNone\\t2005-08-29\\t2015-07-31\\t1\\t0728\\tDirectly funded\\t00\\tCounty Office of Education (COE)\\t65\\tK-12 Schools (Public)\\tTRAD\\tTraditional\\tELEMHIGH\\tElementary-High Combination\\tK-12\\tK-12\\tP\\t0\\t37.521436\\t-121.99391\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\t2015-09-01\\n01100170112607\\t0691051\\t10947\\tActive\\tAlameda\\tAlameda County Office of Education\\tEnvision Academy for Arts & Technology\\t1515 Webster Street\\t1515 Webster St.\\tOakland\\t94612-3355\\tCA\\t1515 Webster Street\\t1515 Webster St.\\tOakland\\t94612\\tCA\\t(510) 596-8901\\tNone\\twww.envisionacademy.org/\\t2006-08-28\\tNone\\t1\\t0811\\tDirectly funded\\t00\\tCounty Office of Education (COE)\\t66\\tHigh Schools (Public)\\tTRAD\\tTraditional\\tHS\\tHigh School\\t9-12\\t9-12\\tN\\t0\\t37.80452\\t-122.26815\\tLaura\\tRobell\\tlaura@envisionacademy.org\\tNone\\tNone\\tNone\\tNone\\tNone\\tNone\\t2015-06-18\\n*/\\n'},\n {'role': 'user',\n  'content': 'How many schools with an average score in Math greater than 400 in the SAT test are exclusively virtual?'}]"
  },
  {
    "objectID": "slides.html#calling-the-llm-with-the-prompt",
    "href": "slides.html#calling-the-llm-with-the-prompt",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Calling the LLM with the prompt",
    "text": "Calling the LLM with the prompt\nlitellm is a Open Source Python library (and also a Proxy) that can be used to run inference and compute embeddings with a vast number of providers (new models added weekly).\nAmong the provider lists we have:\n\nOllama / LMStudio / llama.cpp\nIBM WatsonX.ai\nAnthropic\nOpenAI\nAWS Sagemaker\nOpenRouter\nand more"
  },
  {
    "objectID": "slides.html#structured-output",
    "href": "slides.html#structured-output",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Structured output",
    "text": "Structured output\n\nLLM outputs are text, SQL for our use case.\nIt‚Äôs a good UX to give some explanation to the user about the LLM output. We will use JSON Schema output to have both output without any string manipulation ‚ú®\n\n\n\nfrom pydantic import BaseModel, Field\nclass SQLOutput(BaseModel):\n    sql: str = Field(description=\"The SQL query\")\n    explanation: str = Field(\n      description=\"The reasoning for the query construction\")\n\n# Optional \n# litellm.enable_json_schema_validation = True\n\nresponse = litellm.completion(\n  model=model,\n  messages=messages,\n  response_format=SQLOutput,\n)\noutput = SQLOutput.model_validate_json(\n  response.choices[0].message.content)"
  },
  {
    "objectID": "slides.html#improving-the-generation-with-more-context",
    "href": "slides.html#improving-the-generation-with-more-context",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Improving the Generation with more context",
    "text": "Improving the Generation with more context\nThe BIRD mini has some CSV files that help understanding the tables values and relationships\nWe‚Äôre adding this context in a configuration file, that we will examine in the next section. This is the evidence column from the dataset we saw earlier üí°\n uv run -m sql_with_llms.main ./config-custom.yaml  -c\n\nProvider List: https://docs.litellm.ai/docs/providers\n\n\nProvider List: https://docs.litellm.ai/docs/providers\n\nAnswer: {'sql': \"SELECT COUNT(*) FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.AvgScrMath &gt; 400 AND schools.Virtual = 'F'\", 'result': '[(4,)]'}"
  },
  {
    "objectID": "slides.html#graph-creation",
    "href": "slides.html#graph-creation",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Graph creation",
    "text": "Graph creation\ngraph_builder.add_node(\"init\", init)\n\ngraph_builder.add_node(\n    \"prompt_gen\",\n    partial(prompt_gen, sql_gen_config=sql_gen_config),\n)\ngraph_builder.add_node(\n    \"call_llm\",\n    partial(call_llm, sql_gen_config=sql_gen_config),\n)\ngraph_builder.add_node(\n    \"exec_sql\",\n    partial(exec_sql, sql_gen_config=sql_gen_config),\n)\n\ngraph_builder.add_edge(START, \"init\")\ngraph_builder.add_edge(\"init\", \"prompt_gen\")\ngraph_builder.add_edge(\"prompt_gen\", \"call_llm\")\ngraph_builder.add_edge(\"call_llm\", \"exec_sql\")\ngraph_builder.add_edge(\"exec_sql\", END)\ngraph = graph_builder.compile()\n\nLet‚Äôs take a look at how we define those function and the data types they receive and return\n\n\n\nIn Langraph the node functions must be defined before, but we‚Äôre presenting this before for clarity"
  },
  {
    "objectID": "slides.html#input-class",
    "href": "slides.html#input-class",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Input class",
    "text": "Input class\nThe input and output are these simple dataclasses.\n\n\n@dataclass\nclass Input:\n    \"\"\"User provides the connection\n    details and the question\"\"\"\n\n    question: str\n\n\n\n@dataclass\nclass Output:\n    \"\"\"SQL result and\n    LLM explanation\"\"\"\n\n    sql: str\n    result: str"
  },
  {
    "objectID": "slides.html#state-class",
    "href": "slides.html#state-class",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "State class",
    "text": "State class\nThis the state passed between the inner. The first and last one will receive/return the Input/Output respectively.\nclass Message(TypedDict):\n    \"\"\"Message to pass to litellm\"\"\"\n\n    role: Literal[\"user\", \"system\"]\n    content: str\n\n\n@dataclass\nclass State:\n    question: Optional[str] = None\n    messages: list[Message] = field(default_factory=list)\n    sql: Optional[str] = None"
  },
  {
    "objectID": "slides.html#the-init-node-function",
    "href": "slides.html#the-init-node-function",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "The init node function",
    "text": "The init node function\nThis node consumes the input converting the something of shape Input into a State. The next node will be prompt generation, so we will be save the question.\ndef init(\n    initial: Input,\n) -&gt; State:\n    \"\"\"Initializes the state\"\"\"\n    return State(\n        question=initial.question,\n    )"
  },
  {
    "objectID": "slides.html#global-configuration-class",
    "href": "slides.html#global-configuration-class",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Global configuration class",
    "text": "Global configuration class\nThe nodes beyond the initial one will require to have a bit more information that won‚Äôt change (not considered state). We will provide this as a seconds argument and bind it with functools.partial.\nclass SQLGenConfig(BaseModel):\n    db_url: str = Field(description=\"DB connection string\")\n    engine: Engine = Field(description=\"DB connection\")\n    db: SQLDatabase = Field(description=\"Basic schema info\")\n    system_message_tpl: str = Field(\n        description=r\"Templated sys msg {}\", repr=False\n    )\n    llm: Dict[\n        str, Union[str, Dict[str, str], int, BaseModel]\n    ]\n    structured: bool = Field(\n        description=\"Enable/disable JSON Schema\"\n    )\n    extra_context: Dict[str, str] = Field(\n        default_factory=dict\n    )\n    # ..."
  },
  {
    "objectID": "slides.html#prompt-generation-function-node",
    "href": "slides.html#prompt-generation-function-node",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Prompt generation function node",
    "text": "Prompt generation function node\ndef prompt_gen(state: State, sql_gen_config: SQLGenConfig):\n    \"\"\"Formats the prompt\"\"\"\n    system_message_content = (\n        sql_gen_config.system_message_tpl.format(\n            dialect=sql_gen_config.db.dialect,\n            top_k=10,\n            table_info=sql_gen_config.db.get_table_info(),\n            extra_context=sql_gen_config.extra_context,\n        )\n    )\n    state.messages.extend(\n        [\n            {\n                \"role\": \"system\",\n                \"content\": system_message_content,\n            },\n            {\"role\": \"user\", \"content\": state.question},\n        ]\n    )\n    return state"
  },
  {
    "objectID": "slides.html#llm-calling-function-node",
    "href": "slides.html#llm-calling-function-node",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "LLM calling function node",
    "text": "LLM calling function node\ndef call_llm(\n    state: State, sql_gen_config: SQLGenConfig\n) -&gt; State:\n    response = litellm.completion(\n        messages=state.messages,\n        response_format=SQLOutput\n        if sql_gen_config.structured\n        else None,\n        **sql_gen_config.llm,  # model here\n    )\n    if sql_gen_config.structured:\n        state.sql = SQLOutput.model_validate_json(\n            response.choices[0].message.content\n        ).sql\n    else:\n        state.sql = response.choices[0].message.content\n    logger.info(\n        f\"Generated SQL: {sql_gen_config.structured=} {state.sql=}\"\n    )\n    return state"
  },
  {
    "objectID": "slides.html#sql-execution-function-node",
    "href": "slides.html#sql-execution-function-node",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "SQL Execution function node",
    "text": "SQL Execution function node\ndef exec_sql(\n    state: State, sql_gen_config: SQLGenConfig\n) -&gt; Output:\n    logger.info(f\"Executing SQL {state=}\")\n    with sql_gen_config.engine.connect() as conn:\n        result = conn.execute(text(state.sql))\n        try:\n            results = str(result.fetchall())\n        except Exception as error:\n            results = str(error)\n\n    assert state.sql is not None\n    return Output(sql=state.sql, result=results)"
  },
  {
    "objectID": "slides.html#running-the-code",
    "href": "slides.html#running-the-code",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Running the code",
    "text": "Running the code\ngit clone https://github.com/D3f0/pycon-sql-llm.git\nuv sync\nuv run -m sql_with_llms.main"
  },
  {
    "objectID": "slides.html#extensibilit",
    "href": "slides.html#extensibilit",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Extensibilit",
    "text": "Extensibilit\n\nOffload node responsibilities into external services (e.g.¬†DB execution)\nPipelines defined as YAML\nUse Python‚Äôs built in entry-point system to install nodes This is a good approach to separate production from"
  },
  {
    "objectID": "slides.html#thank-you-questions",
    "href": "slides.html#thank-you-questions",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Thank you & Questions",
    "text": "Thank you & Questions\n\n\n\n\n\n\n    \n\n\n\n\n nahuel.defosse@ibm.com"
  },
  {
    "objectID": "slides.html#coding-models",
    "href": "slides.html#coding-models",
    "title": "üí¨  ü§ñ Asking questions to your database with LLMs",
    "section": "Coding models",
    "text": "Coding models\n\n\n\nLLMs are quite capable of writing functional SQL queries, from the named code/coder to specific ones for (sql) generation.\n\n\n\nFor example, some IBM trained models include:\n\ngranite-3-2-8b-instruct\ngranite-34b-code-instruct\ngranite-20b-code-base-schema-linking\ngranite-20b-code-base-sql-gen\n\nMore info on these models  | And also in ü§ó \n\n\n\nFor those of us who have been writing code for some time and fell in love with ORMs when they were the hot new thing, LLMs can take us to the next level!"
  }
]