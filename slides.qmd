---
title: "üí¨ ‚ùì ü§ñ Asking questions to your database with LLMs "
subtitle: "Techniques for effective SQL generation"
author: Nahuel Defoss√© <br>[nahuel.defosse@ibm.com](mailto:nahuel.defosse@ibm.com)<br>IBM Research Kenya Lab
date: September, 2025
embed-resources: false
---


# About myself {.smaller}

::: {.columns}
::: {.column width="40%"}
![](./img/myself.jpg){height="12em"}
:::

::: {.column width="60%"}

::: {.incremental}
- Worked in Agritech at Hello Tractor 
- Software Engineer at IBM Research  Nairobi
- Worked in Foundational Models for Geospatial applications üõ∞Ô∏èüó∫Ô∏èü§ñ
- Currently working on Flowpilot project, providing core features to 
  different products and divisions.
:::

:::
:::


---

## LLMs used for SQL generation

LLMs have been  capable of generating SQL from text questions for some time.

Frontier models have been trained with large sets of queries enabling the generation of complex `join`s expressions, window functions `over` with custom aggregation as well as breaking
down the problem into pieces using common table expressions `WITH ...`.

::: {.notes}
Claude, GPT-4 and DeepSeek can create a quite advanced SQLs
:::
---

![](./img/memes/not-enough.gif){.meme .not-enough}

::: {.notes}
If we don't tell the model the structure of the database, it's very unlikely the
LLM will come back with correct SQL.
:::


---

## Relevant challenges

::: {.incremental}
- üîí Confidentiality of the data sent to the LLMs
  - Can I run it on prem?
- ü•¥ Models can hallucinate making up inexistent tables, columns or functions
- SQL dialects have their nuances (SQLite, Postgres, MySQL)
  - e.g. date manipulation, `CURDATE()` vs `CURRENT_DATE` vs `GETDATE()` vs `SYSDATE`

:::

::: {.notes}
These are challenges relevant in the B2B space, where I work.

Date manipulation MySQL/PostgreSQL/SQL Server/Oracle
:::

---

## Our project goals

::: {.incremental .smaller}
- Create and validate existing state of the art techniques in the text to SQL space...
  -  Starting with public datasets but focused on tailor for propietary databases
  - Benchmarking (OSS'ed framework [unitxt](https://github.com/IBM/unitxt))
- Support multiple dialects (SQLite, Postgres {{< bi database >}}, Presto {{< bi database >}}, IBM db2 {{< bi database >}}, {{< bi filetype-csv >}} CSV,  {{< bi filetype-xls >}} Excel, etc).
- Extensibility and auto-configuration based on benchmarks.
:::

::: {.note}

:::
---

## Engineering goals

::: {.incremental}

- Internal SaaS with üí¨ chat and ‚ÜîÔ∏è APIs available.
  - Multi tenancy
- Python SDK for developers who want to extend
  
:::


---

# Where to start

---

![](./img/memes/robots.gif)

::: {.notes}
Let's start talking about the state of the art. 
There are a few set of annotated databases that can help to gauge 
our solution, we refer to them as public datasets and there are 3 of them
we used extensively.
:::

---

## Spider

![](./img/spider-1.png){fig-align="center" height="500px"}

<div style='text-align: center'>
[ {{< bi folder-symlink-fill >}} https://yale-lily.github.io/spider](https://yale-lily.github.io/spider)
</div>

::: {.notes} 
166 SQLite databases, code repository and public leaderboard.
:::


::: notes
Dataset
:::

---

### Example of a SQLite DB in spider

![](./img/spider-1-sample.png){fig-align="center"}


---

### Example of the queries {.scrollable}

:::: {.columns}
::: {.column with="50%"}
![](./img/spider_examples_easy_med.png)
:::
::: {.column with="50%" height="100%"}

![](./img/spider_examples.png)
:::

::::

---

### Spider leaderboard

![](./img/leaderboard-bird1.png){height="600px" fig-align="center"}

::: footer
#TODO put IBM {{< bi alarm >}}
:::

---

## Spider 2

![](./img/spider.png){fig-align="center" height="8em"}

. . .

Comes in 3 flavours

:::: {.columns}

::: {.column width="33%"}
<!-- ‚ùÑÔ∏è Snowflake -->
![](./img/logo/snowflake.png){height="1em"}
::: 

::: {.column width="33%"}
<!-- üì¶ SQLite -->
![](./img/logo/sqlite.png){height="1em"} SQLite
::: 

::: {.column width="33%"}
dbt
::: 

::::

::: {.footer}
{{<bi alarm >}} fix style upüëÜ
:::
---

### Spider 2 

![](./img/Spider2-structure.png)

<!-- 
---
### Spider 2

This focuses on larger datasets, in many cases, analytic databases.

:::: {.columns}


::: {.column with="50%"}
TBD
:::
::: {.column with="50%"}
TBD
:::

:::: -->


---

### BIRD

![](./img/bird.png){fig-align="center"}

. . .

[{{< bi  folder-symlink-fill >}} https://bird-bench.github.io/](https://bird-bench.github.io/)

::: footer
BIRD
:::

---

# Breaking down the problem

---

## Some concepts

::: {.incremental}
- **DDL**, the part of SQL dialect that defines the **tables** and their **relationships**.
  - we well call it the *schema* 
- **DML**, the SQL part that operates on the data, creation, modification and retrieval.
  - We're mostly interested in `SELECT` (and `WITH`).
:::


---

```{dot}
digraph {
  background="transparent";
    fontname="Arial";

  rankdir=LR;  // Sets direction from Left to Right
  user [style=dashed]
  user -> Question;
  LLM [shape=box, style=filled,  color="#AABBCC"];
  extract[shape=box, label="SQL Extraction", style=filled, color="#AACCEE"];
  execute[shape=box, label="Execution"];
  Question -> LLM [label="User input"];
  LLM -> extract [label="Find braced sql ```"];
  extract -> execute;
}
```

:::: {.fade-in}

- üî•
  
::::

---


![Chat example](./img/arch.drawio.svg){fig-align="center"}

Move this to a more appropriate place.
- üèõÔ∏è Providing the DB structure helps a lot to reduce hallucinations
- üßëüèΩ‚Äçüè´ Adding examples of queries with their description usually also improved performance

---

::: {.incremental}
- Can we pass all the DDL in the prompt with the user question?
- Can we entice the LLM to select the most appropriate pares of that DDL?
  - ‚û°Ô∏è RAG over tables, columns and values
::: 


---

## Schema linking

SL is an common improvement over in text to SQL generation to improve accuracy and reduce
hallucinations. It consists on mapping natural language words to `tables`, `views`, `columns` and `values`.

. . . 

We can do it with a different approaches, FTS, Vector Databases, etc.

---

### Schema Liking Techniques

::: {.incremental}
- Prompt engineering
  - Providing `CREATE TABLE customers (name varchar...)`
- Retrieval Augmented Generation RAG
- Agentic approaches, function calling
  - `give_me_tables(user_input)`
- Fine tuned models
  - Provide SQL examples and their meaning
:::

---

### SL with RAG

TBD

---

## Fixing errors

The LLM in use may generate invalid SQL:

::: {.incremental}
- {{< bi bi-table >}}  tables or columns that don't exist
- dialect functions that don't exist
  - *TBD* time functions
- 
:::

---

# Putting things together

---

## DSL for pipelines

```{mermaid}
graph LR
    1[User input] --> 2[Find relevant tables]
    2 --> 3[Find relevant values]
    3 --> 4[Find relevant examples]
    4 --> 5[Create prompt using templating]
    5 --> 6[Call LLM, parse results]
    6 --> 7[Correct results]
    7 --> 8[Run query on the database]
    8 --> 1
```


---

## Current OSS tooling

- ü¶ú ‚õìÔ∏è LangChain: [`Q/A over SQL data`](https://python.langchain.com/docs/tutorials/sql_qa/)

::: fragment
```{.python}
print(1)

```
::: 
---

## Pydantic AI 

2- PyDantic's AI [`SQL workbench`](https://ai.pydantic.dev/examples/sql-gen/)

---

## Common challenges

- Some databases have specific dialects, e.g. SQLite, Postgres, MySQL, Oracle, db2, etc.
- The training set of the models may not have a sufficient examples 
  for the database engine we're interested in.
- Providing tables is great, but some times, schemas are quite big
  and the table and column names may be not human friendly.


---

## Pipelines

Our work was focused on prompt optimization by a small team, but as 
our teams tarted to grown we needed to allow different research team
to focus on different areas.

We created a framework inspired in LangGraph tailored to the text2sql 
generation. 




--- 


<!-- - [x]  Bird benchmarks
- [x] Benchmarks frameworks and leaderboards
	- Unitxt
- Pipelines
- Providing context 
	- 
- Shape of the context 
- Model sizes
	- Limits
- other node

--- -->
