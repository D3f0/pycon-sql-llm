---
title: '💬 {{< bi database >}} 🤖 Asking questions to your database with LLMs '
author: Nahuel Defossé <br>[nahuel.defosse@ibm.com](mailto:nahuel.defosse@ibm.com)<br>IBM Research Kenya Lab
date: September, 2025
embed-resources: false
footer: '*Asking question to {{< bi database >}} with LLMs* - 🐍 PyCon 🇰🇪 2025'
execute:
  cache: true
  keep-ipynb: true
format:
  revealjs:
    toc: false
    toc-depth: 1
    slide-number: true
    transition: slide
    code-copy: true
    highlight-style: github
    code-overflow: wrap
    theme:
      - solarized
      - custom.scss
    header-logo-right: ./img/pynbo.png
    header-logo-right-url: https://pycon-kenya-2025.sessionize.com/
    header-logo-right-height: 2em
    preview-links: auto
filters:
  - reveal-logo
jupyter: python3
---
```{python}
%load_ext rich
```
## About myself {.smaller}

:::: {.columns}
::: {.column width="40%"}
![](./img/memes/myself.gif){height="12em"}
:::

::: {.column width="60%"}

::: {.incremental}
- 🐍 Pythonista with 18 years of experience.
  - Co-organized SciPy Latin America
- 🚜 Worked as CTO in  Hello Tractor 
- 🧪 Software Engineer at IBM Research 
- 🛰️ Worked in Foundational Models for Geospatial applications
- 💬 Currently working on [Flowpilot {{< bi link-45deg >}}](https://research.ibm.com/projects/flowpilot), providing core features to 
  different products and divisions.
::: 

:::
::::


---

## Follow along (or at 🏡) {.center}

{{< qrcode https://jmbuhr.de >}}


---

# Intro {.smaller}

In this talk we're gonna show how to use Python to:

::: {.columns}
::: {.column}


  - Connect to a database and execute the queries
  - Convert natural language questions into SQL
  - Create a workflow
  - Fix common errors
  - Lessons learned
:::
::: {.column}
TODO: Put some drawing & rephrase
:::
:::
---

# Connect to a database and execute the queries


---

## Public datasets used in text to SQL

:::: {.columns}
::: {.column}
::: {.fragment .fade-right}

:::

::: {.fragment .fade-right}
- [🕷️ Spider](https://yale-lily.github.io/spider){target="_bank"}
:::
::: {.fragment .fade-right}
- [🕷️ 🕷️ Spider 2](https://spider2-sql.github.io/){target="_bank"}
:::
::: {.fragment .fade-right}
- 🐦 [BIRD](https://bird-bench.github.io/){target="_bank"}
:::
::: {.fragment .fade-right}
- [🏹 Archer](https://sig4kg.github.io/archer-bench/){target="_bank"}
:::
:::
::: {.column}
::: {.fragment .fade-left .small_text}
These datasets define:

- ❓ Natural language questions
- 🫰 Expected SQL
- 🏗️ Database schema & content
- 🔎 Evaluation metrics 
- 🥇 Leaderboard
:::
:::
::::


::: notes
:::

---

## BIRD 

![](./img/ibm-granite-leaderboard.png){height="400px" fig-align="center"}

[{{<bi article>}} article](https://research.ibm.com/blog/granite-LLM-text-to-SQL)


::: notes
We're select BIRD dataset since we have some experience with it, we managed
to get to the top of the leatherboard in 2024/6
:::

---

### BIRD mini-dev

- It consist of 500 queries classified as **simple**, **moderate** and **challenging** [{{< bi box-arrow-up-right >}}](https://github.com/bird-bench/mini_dev)

::: {.fragment .fade-left}

```{python}
from rich.console import Console
_c = Console(width=75)
# Ensure print are contained within the range
print = _c.print
```

```{python}
#| echo: true
#| output-location: slide
from datasets import load_dataset, DownloadConfig 

# Load the dataset
dataset = load_dataset(
  "birdsql/bird_mini_dev", download_config=DownloadConfig(disable_tqdm=True)
)

# Contents
print("Database types: ", *dataset.keys())
sqlite_df = dataset["mini_dev_sqlite"].to_pandas()
sqlite_df = sqlite_df.drop(columns=['question_id'])
display(sqlite_df.head(2))
```

:::
